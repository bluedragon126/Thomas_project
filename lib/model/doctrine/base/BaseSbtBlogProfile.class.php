<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('SbtBlogProfile', 'doctrine');

/**
 * BaseSbtBlogProfile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $my_own_writing
 * @property string $user_title
 * @property string $not_on_stock
 * @property string $type_of_speculator
 * @property string $broker_used
 * @property string $my_trade
 * @property string $my_occupation
 * @property string $is_millionaire
 * @property string $my_best_trade
 * @property string $my_worst_trade
 * @property string $my_five_best_recommendations
 * @property string $my_shortlist
 * 
 * @method integer        getId()                           Returns the current record's "id" value
 * @method integer        getUserId()                       Returns the current record's "user_id" value
 * @method string         getMyOwnWriting()                 Returns the current record's "my_own_writing" value
 * @method string         getUserTitle()                    Returns the current record's "user_title" value
 * @method string         getNotOnStock()                   Returns the current record's "not_on_stock" value
 * @method string         getTypeOfSpeculator()             Returns the current record's "type_of_speculator" value
 * @method string         getBrokerUsed()                   Returns the current record's "broker_used" value
 * @method string         getMyTrade()                      Returns the current record's "my_trade" value
 * @method string         getMyOccupation()                 Returns the current record's "my_occupation" value
 * @method string         getIsMillionaire()                Returns the current record's "is_millionaire" value
 * @method string         getMyBestTrade()                  Returns the current record's "my_best_trade" value
 * @method string         getMyWorstTrade()                 Returns the current record's "my_worst_trade" value
 * @method string         getMyFiveBestRecommendations()    Returns the current record's "my_five_best_recommendations" value
 * @method string         getMyShortlist()                  Returns the current record's "my_shortlist" value
 * @method SbtBlogProfile setId()                           Sets the current record's "id" value
 * @method SbtBlogProfile setUserId()                       Sets the current record's "user_id" value
 * @method SbtBlogProfile setMyOwnWriting()                 Sets the current record's "my_own_writing" value
 * @method SbtBlogProfile setUserTitle()                    Sets the current record's "user_title" value
 * @method SbtBlogProfile setNotOnStock()                   Sets the current record's "not_on_stock" value
 * @method SbtBlogProfile setTypeOfSpeculator()             Sets the current record's "type_of_speculator" value
 * @method SbtBlogProfile setBrokerUsed()                   Sets the current record's "broker_used" value
 * @method SbtBlogProfile setMyTrade()                      Sets the current record's "my_trade" value
 * @method SbtBlogProfile setMyOccupation()                 Sets the current record's "my_occupation" value
 * @method SbtBlogProfile setIsMillionaire()                Sets the current record's "is_millionaire" value
 * @method SbtBlogProfile setMyBestTrade()                  Sets the current record's "my_best_trade" value
 * @method SbtBlogProfile setMyWorstTrade()                 Sets the current record's "my_worst_trade" value
 * @method SbtBlogProfile setMyFiveBestRecommendations()    Sets the current record's "my_five_best_recommendations" value
 * @method SbtBlogProfile setMyShortlist()                  Sets the current record's "my_shortlist" value
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSbtBlogProfile extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sbt_blog_profile');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('my_own_writing', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('user_title', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('not_on_stock', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('type_of_speculator', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('broker_used', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('my_trade', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('my_occupation', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('is_millionaire', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('my_best_trade', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('my_worst_trade', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('my_five_best_recommendations', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('my_shortlist', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}