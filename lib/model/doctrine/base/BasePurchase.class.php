<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Purchase', 'doctrine');

/**
 * BasePurchase
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $email
 * @property string $firstname
 * @property string $lastname
 * @property string $street
 * @property string $zipcode
 * @property string $city
 * @property string $telephone
 * @property string $country
 * @property float $total_price
 * @property string $payment_method
 * @property string $transaction_id
 * @property string $response_code
 * @property integer $checkout_status
 * @property integer $order_processed
 * @property timestamp $created_at
 * @property timestamp $payment_date
 * @property Doctrine_Collection $Subscription
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getUserId()          Returns the current record's "user_id" value
 * @method string              getEmail()           Returns the current record's "email" value
 * @method string              getFirstname()       Returns the current record's "firstname" value
 * @method string              getLastname()        Returns the current record's "lastname" value
 * @method string              getStreet()          Returns the current record's "street" value
 * @method string              getZipcode()         Returns the current record's "zipcode" value
 * @method string              getCity()            Returns the current record's "city" value
 * @method string              getTelephone()       Returns the current record's "telephone" value
 * @method string              getCountry()         Returns the current record's "country" value
 * @method float               getTotalPrice()      Returns the current record's "total_price" value
 * @method string              getPaymentMethod()   Returns the current record's "payment_method" value
 * @method string              getTransactionId()   Returns the current record's "transaction_id" value
 * @method string              getResponseCode()    Returns the current record's "response_code" value
 * @method integer             getCheckoutStatus()  Returns the current record's "checkout_status" value
 * @method integer             getOrderProcessed()  Returns the current record's "order_processed" value
 * @method timestamp           getCreatedAt()       Returns the current record's "created_at" value
 * @method timestamp           getPaymentDate()     Returns the current record's "payment_date" value
 * @method Doctrine_Collection getSubscription()    Returns the current record's "Subscription" collection
 * @method Purchase            setId()              Sets the current record's "id" value
 * @method Purchase            setUserId()          Sets the current record's "user_id" value
 * @method Purchase            setEmail()           Sets the current record's "email" value
 * @method Purchase            setFirstname()       Sets the current record's "firstname" value
 * @method Purchase            setLastname()        Sets the current record's "lastname" value
 * @method Purchase            setStreet()          Sets the current record's "street" value
 * @method Purchase            setZipcode()         Sets the current record's "zipcode" value
 * @method Purchase            setCity()            Sets the current record's "city" value
 * @method Purchase            setTelephone()       Sets the current record's "telephone" value
 * @method Purchase            setCountry()         Sets the current record's "country" value
 * @method Purchase            setTotalPrice()      Sets the current record's "total_price" value
 * @method Purchase            setPaymentMethod()   Sets the current record's "payment_method" value
 * @method Purchase            setTransactionId()   Sets the current record's "transaction_id" value
 * @method Purchase            setResponseCode()    Sets the current record's "response_code" value
 * @method Purchase            setCheckoutStatus()  Sets the current record's "checkout_status" value
 * @method Purchase            setOrderProcessed()  Sets the current record's "order_processed" value
 * @method Purchase            setCreatedAt()       Sets the current record's "created_at" value
 * @method Purchase            setPaymentDate()     Sets the current record's "payment_date" value
 * @method Purchase            setSubscription()    Sets the current record's "Subscription" collection
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePurchase extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('purchase');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('email', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('firstname', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('lastname', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('street', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('zipcode', 'string', 15, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 15,
             ));
        $this->hasColumn('city', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('telephone', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('country', 'string', 4, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('total_price', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('payment_method', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('transaction_id', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('response_code', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('checkout_status', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('order_processed', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('payment_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Subscription', array(
             'local' => 'id',
             'foreign' => 'purchase_id'));
    }
}