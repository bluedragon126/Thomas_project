<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('SbtObject', 'doctrine');

/**
 * BaseSbtObject
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $object_name
 * @property string $object_short_name
 * @property integer $market_id
 * @property integer $stocklist_id
 * @property integer $sector_id
 * @property integer $type_id
 * @property SbtMarket $SbtMarket
 * @property SbtSector $SbtSector
 * @property SbtStockList $SbtStockList
 * @property SbtArticleType $SbtArticleType
 * @property Doctrine_Collection $SbtAnalysis
 * @property Doctrine_Collection $SbtUserBlog
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method string              getObjectName()        Returns the current record's "object_name" value
 * @method string              getObjectShortName()   Returns the current record's "object_short_name" value
 * @method integer             getMarketId()          Returns the current record's "market_id" value
 * @method integer             getStocklistId()       Returns the current record's "stocklist_id" value
 * @method integer             getSectorId()          Returns the current record's "sector_id" value
 * @method integer             getTypeId()            Returns the current record's "type_id" value
 * @method SbtMarket           getSbtMarket()         Returns the current record's "SbtMarket" value
 * @method SbtSector           getSbtSector()         Returns the current record's "SbtSector" value
 * @method SbtStockList        getSbtStockList()      Returns the current record's "SbtStockList" value
 * @method SbtArticleType      getSbtArticleType()    Returns the current record's "SbtArticleType" value
 * @method Doctrine_Collection getSbtAnalysis()       Returns the current record's "SbtAnalysis" collection
 * @method Doctrine_Collection getSbtUserBlog()       Returns the current record's "SbtUserBlog" collection
 * @method SbtObject           setId()                Sets the current record's "id" value
 * @method SbtObject           setObjectName()        Sets the current record's "object_name" value
 * @method SbtObject           setObjectShortName()   Sets the current record's "object_short_name" value
 * @method SbtObject           setMarketId()          Sets the current record's "market_id" value
 * @method SbtObject           setStocklistId()       Sets the current record's "stocklist_id" value
 * @method SbtObject           setSectorId()          Sets the current record's "sector_id" value
 * @method SbtObject           setTypeId()            Sets the current record's "type_id" value
 * @method SbtObject           setSbtMarket()         Sets the current record's "SbtMarket" value
 * @method SbtObject           setSbtSector()         Sets the current record's "SbtSector" value
 * @method SbtObject           setSbtStockList()      Sets the current record's "SbtStockList" value
 * @method SbtObject           setSbtArticleType()    Sets the current record's "SbtArticleType" value
 * @method SbtObject           setSbtAnalysis()       Sets the current record's "SbtAnalysis" collection
 * @method SbtObject           setSbtUserBlog()       Sets the current record's "SbtUserBlog" collection
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSbtObject extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sbt_object');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('object_name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('object_short_name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('market_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('stocklist_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('sector_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('type_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('SbtMarket', array(
             'local' => 'market_id',
             'foreign' => 'id'));

        $this->hasOne('SbtSector', array(
             'local' => 'sector_id',
             'foreign' => 'id'));

        $this->hasOne('SbtStockList', array(
             'local' => 'stocklist_id',
             'foreign' => 'id'));

        $this->hasOne('SbtArticleType', array(
             'local' => 'type_id',
             'foreign' => 'id'));

        $this->hasMany('SbtAnalysis', array(
             'local' => 'id',
             'foreign' => 'analysis_object_id'));

        $this->hasMany('SbtUserBlog', array(
             'local' => 'id',
             'foreign' => 'ublog_object_id'));
    }
}