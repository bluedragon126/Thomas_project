<?php

/**
 * Subscription
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Subscription extends BaseSubscription {
    /*
     *
     * This function a record.
     *
     */

    public function getSubscrition($id) {
        if ($id) {
            $query = Doctrine_Query::create()->from('Subscription s')->where('s.id = ?', $id);
            $data = $query->fetchOne();
            return $data;
        }

        return '';
    }

    /*
     *
     * This function returns all the subscription query.
     *
     */

    public function getAllSubscriptionQuery() {
        $query = Doctrine_Query::create()->from('Subscription ss')->orderBy('ss.purchase_id DESC');
        return $query;
    }
    
    public function getAllSubscriptionQueryAbonnmang() {
        $query = Doctrine_Query::create()->from('Subscription ss')->where('ss.product_type_id=?',6)->orderBy('ss.purchase_id DESC');
        return $query;
    }

    /*
     *
     * This function returns all the subscription query by specific order.
     *
     */

    public function getAllSubscribersByOrders($ord_no, $first_name, $last_name) {

        $query = Doctrine_Query::create();
        $query->from('Subscription s')
                ->leftJoin('s.Purchase p ')
                ->where('s.purchase_id=p.id');

        if ($first_name) {
            $query = $query->andWhere('p.firstname LIKE "%' . $first_name . '%"');
        }
        if ($last_name) {
            $query = $query->andWhere('p.lastname LIKE "%' . $last_name . '%"');
        }
        if ($ord_no) {
            $query = $query->andWhere('p.id=?', $ord_no);
        }
        return $query;
    }

    public function getAllSubscriptionOfUserQueryByOrder($pur_id_str,$user_id) {
        $query = Doctrine_Query::create()->from('Subscription ss')->innerJoin('ss.Purchase p on ss.purchase_id = p.id')->andWhere("p.user_id = $user_id");
        $query_str = '( ss.purchase_id IN (' . $pur_id_str . ') )';
        $query = $query->where($query_str);
        $query = $query->orderBy('ss.created_at DESC');
        return $query;
    }

    /*
     *
     * This function returns all the subscription query by specific order.
     *
     */

    public function getSubscriptionOfUserQueryAbonmang($column_id, $order, $selected_subscription_type, $data, $action_type) {
        $first_name = $data['firstname'];
        $last_name = $data['lastname'];
        $ord_no = $data['orderno'];

        $query = Doctrine_Query::create();
        $query->from('Subscription s')
                ->leftJoin('s.Purchase p ')
                ->leftJoin('s.BtShopArticle bsa')
                ->where('s.product_type_id=?',6)
                ->andWhere('s.purchase_id=p.id');

        if ($selected_subscription_type != 'All'){
            $query = $query->andWhere('s.product_id = ?', $selected_subscription_type)->orderBy('s.purchase_id DESC');
        }
        if (isset($first_name) && $first_name != '') {
            $query = $query->andWhere('p.firstname LIKE ?', $first_name . '%')->orderBy('s.purchase_id DESC');
        }
        if (isset($last_name) && $last_name != '') {
            $query = $query->andWhere('p.lastname LIKE ?', $last_name . '%')->orderBy('s.purchase_id DESC');
        }
        if (isset($ord_no) && $ord_no != '') {
            $query = $query->andWhere('p.id=?', $ord_no)->orderBy('s.purchase_id DESC');
        }

        switch ($column_id) {
            case 'name': $query = $query->orderBy("bsa.btshop_article_title  $order, s.purchase_id DESC");
                break;

            case 'startdate': $query = $query->orderBy("s.start_date  $order, s.purchase_id DESC");
                break;

            case 'stopdate': $query = $query->orderBy("s.end_date $order, s.purchase_id DESC");
                break;

            case 'firstname': $query = $query->orderBy("p.firstname $order, s.purchase_id DESC");
                break;

            case 'lastname': $query = $query->orderBy("p.lastname $order, s.purchase_id DESC");
                break;

            case 'default': $query = $query->orderBy("s.purchase_id DESC");
                break;
        }
        // print_r($query->getSqlQuery());//exit;
        if(!$column_id){
             $query = $query->orderBy("s.purchase_id DESC");
        }

        return $query;
    }
    
    
    public function getSubscriptionOfUserQuery($column_id, $order, $selected_subscription_type, $data, $action_type) {
        $first_name = $data['firstname'];
        $last_name = $data['lastname'];
        $ord_no = $data['orderno'];

        $query = Doctrine_Query::create();
        $query->from('Subscription s')
                ->leftJoin('s.Purchase p ')
                ->leftJoin('s.BtShopArticle bsa')
                ->andWhere('s.purchase_id=p.id');

        if ($selected_subscription_type != 'All')
            $query = $query->andWhere('s.product_id = ?', $selected_subscription_type)->orderBy('s.purchase_id DESC');

        if (isset($first_name) && $first_name != '') {
            $query = $query->andWhere('p.firstname LIKE ?', $first_name . '%')->orderBy('s.purchase_id DESC');
        }
        if (isset($last_name) && $last_name != '') {
            $query = $query->andWhere('p.lastname LIKE ?', $last_name . '%')->orderBy('s.purchase_id DESC');
        }
        if (isset($ord_no) && $ord_no != '') {
            $query = $query->andWhere('p.id=?', $ord_no)->orderBy('s.purchase_id DESC');
        }

        switch ($column_id) {
            case 'name': $query = $query->orderBy("bsa.btshop_article_title  $order, s.purchase_id DESC");
                break;

            case 'startdate': $query = $query->orderBy("s.start_date  $order, s.purchase_id DESC");
                break;

            case 'stopdate': $query = $query->orderBy("s.end_date $order, s.purchase_id DESC");
                break;

            case 'firstname': $query = $query->orderBy("p.firstname $order, s.purchase_id DESC");
                break;

            case 'lastname': $query = $query->orderBy("p.lastname $order, s.purchase_id DESC");
                break;

            case 'default': $query = $query->orderBy("s.purchase_id DESC");
                break;
        }
        // print_r($query->getSqlQuery());//exit;


        return $query;
    }

    /*
     *
     * This function searches and deletes subscriptions.
     *
     */

    public function searchAndDeleteSubsciptions($id) {
        $query = Doctrine_Query::create()->from('Subscription ss')->where('ss.product_id = ? ', $id);
        $data = $query->execute();

        foreach ($data as $rec) {
            $rec->delete();
        }
    }

    /*
     *
     * This function saves the Subscription record.
     *
     */

    public function addSubscription($purchase_id, $product_id, $product_type_id, $price_detail_id, $start_date, $chart_type, $articleornot) {

        $userId = Doctrine::getTable('Purchase')->find($purchase_id)->user_id;

        $price_dtl = new BtShopPriceDetails();
        $rec = $price_dtl->getSearchRecord($price_detail_id);

        $chartObj = new BtchartType();
        $chartTypes = $chartObj->getPaidChartTypes(false);

        // $product_type_id == 7 && $chart_type == 0 i.e. All BT charts 
        // $product_type_id == 8 && $chart_type == 0 i.e. All BT charts + abonnemang ( right now product id 20,21)
        // this is temp fix for xmas offer added by jayawant 08-12-2011
        if (($product_type_id == 7 && $chart_type == 0) || ($product_type_id == 8 && $chart_type == 0)) {
            
            
            foreach ($chartTypes as $key => $name) {
                $this->addSubscriptionRecord($purchase_id, $product_id, 7, $price_detail_id, $start_date, $key, $rec, $userId, $articleornot);
            }

            if ($product_type_id == 8) {
                $abonnemangs = array(20, 21);

                foreach ($abonnemangs as $productId) {
                    $this->addSubscriptionRecord($purchase_id, $productId, 6, $price_detail_id, $start_date, 0, $rec, $userId, $articleornot);
                }
            }
        } else {
            $this->addSubscriptionRecord($purchase_id, $product_id, $product_type_id, $price_detail_id, $start_date, $chart_type, $rec, $userId, $articleornot);
        }
    }

    private function addSubscriptionRecord($purchase_id, $product_id, $product_type_id, $price_detail_id, $start_date, $chart_type, $rec, $userId, $articleornot) {
        // get last subscriptions for user and product
        $subscriptions = $this->checkSubscription($product_id, $product_type_id, $userId, $chart_type);

        $unit = array('1' => 'day', '2' => 'day', '3' => 'week', '4' => 'month', '5' => 'year');

        $date1 = $subscriptions->end_date;
        $date2 = date('Y-m-d');

        $diff = (strtotime($date2) - strtotime($date1));

        if (count($subscriptions) > 0 && ($diff < 0 || $diff == 0)) {
            $duration = ("+" . $rec->btshop_product_quantity . " " . $unit[$rec->btshop_price_unit_id]);
            $start_date = $subscriptions->end_date;
            $end_date = strtotime(date("Y-m-d", strtotime($subscriptions->end_date)) . $duration);
            $stopdate = date('Y-m-d', $end_date);
        } else {
            $duration = strtotime("+" . $rec->btshop_product_quantity . " " . $unit[$rec->btshop_price_unit_id]);
            $stopdate = date('Y-m-d', $duration);
        }

        $subscription = new Subscription();
        $subscription->purchase_id = $purchase_id;
        $subscription->product_id = $product_id;
        $subscription->product_type_id = $product_type_id;
        $subscription->subscription_duration = $rec->btshop_product_quantity;
        $subscription->subscription_duration_unit = $unit[$rec->btshop_price_unit_id];
        $subscription->scheme_name = $rec->btshop_product_text;
        $subscription->start_date = $start_date;
        $subscription->end_date = $stopdate;
        $subscription->created_at = $start_date;
        $subscription->btchart_type_id = $chart_type;
        $subscription->articleornot = $articleornot;
        $subscription->save();
    }
    
    
    public function addSubscriptionRecordArticle($purchase_id, $product_id, $product_type_id, $price_detail_id, $start_date, $articleornot) {
        $subscription = new Subscription();
        $subscription->purchase_id = $purchase_id;
        $subscription->product_id = $product_id;
        $subscription->product_type_id = $product_type_id;
        $subscription->articleornot = $articleornot;
        //$subscription->subscription_duration = $rec->btshop_product_quantity;
        //$subscription->subscription_duration_unit = $unit[$rec->btshop_price_unit_id];
        //$subscription->scheme_name = $rec->btshop_product_text;
        //$subscription->start_date = $start_date;
        //$subscription->end_date = $stopdate;
        $subscription->created_at = $start_date;
        //$subscription->btchart_type_id = $chart_type;
        $subscription->save();
    }
    

    public function checkSubscription($product_id, $product_type_id, $userId, $chart_type) {
        if ($userId == 0) {
            return false;
        }

        if ($product_type_id == 7 && $chart_type != 0) {

            $query = Doctrine_Query::create()->from('Subscription ss')->innerJoin('ss.Purchase p')->where('ss.btchart_type_id = ? AND ss.product_type_id = ? and p.user_id=? and p.checkout_status <> 0', array($chart_type, $product_type_id, $userId))->orderBy('ss.end_date desc');
        } else {
            $query = Doctrine_Query::create()->from('Subscription ss')->innerJoin('ss.Purchase p')->where('ss.product_id = ? AND ss.product_type_id = ? and p.user_id=? and p.checkout_status <> 0', array($product_id, $product_type_id, $userId))->orderBy('ss.end_date desc');
        }

        $subscriptions = $query->fetchOne();

        return $subscriptions;
    }

    /*
     *
     * This function updates purchase tabble.
     *
     */

    public function updatePurchase($arr) {
        if ($arr['purchase_ids']) {
            foreach ($arr['purchase_ids'] as $key => $value) {
                $record = $this->getSubscrition($value);

                $record->start_date = $arr["startdate"][$key];
                $record->end_date = $arr["enddate"][$key];
                $record->save();
            }
        }
    }

    /*
     *
     * This function return arr of purchase ids valid on date.
     *
     */

    public function getEmailOfValidPurchaseIdOnDate($arr, $para) {
        $purchase = new Purchase();
        $dt = "'" . date('Y-m-d') . "'";
        $purchase_id_arr = $only_email = array();
        $date_flag = 0;

        if ($para == 'list') {
            $product_id = $arr['filter_subscription_id'];
            $product_type_id = $arr['filter_shop_art_type'];
        }

        if ($para == 'email') {
            $product_id = $arr['subscription_id'];
            $product_type_id = $arr['shop_art_type'];
        }

        $query = Doctrine_Query::create()->select('ss.purchase_id as purchase_id,ss.start_date as start_date,ss.end_date as end_date')->from('Subscription ss');

        if (isset($arr["ej"]))
            $query = $query->where('ss.product_id != ? AND ss.product_type_id != ?', array($product_id, $product_type_id));
        else
            $query = $query->where('ss.product_id = ? AND ss.product_type_id = ?', array($product_id, $product_type_id));

        //echo $query->getSqlQuery();

        $data = $query->fetchArray();

        if ($arr['sub_start_date_text'] != '' && $arr['sub_end_date_text'] != '')
            $date_flag = 1;


        $j = 0;
        if ($date_flag == 1) {
            for ($i = 0; $i < count($data); $i++) {
                if (($arr['sub_start_date_text'] <= $data[$i]['end_date']) && ($arr['sub_end_date_text'] >= $data[$i]['end_date'])) {
                    $purchase_id_arr[$j] = $data[$i]['purchase_id'];
                    $j++;
                }
            }
        } else {
            for ($i = 0; $i < count($data); $i++) {
                if (($data[$i]['start_date'] <= date('Y-m-d')) && ($data[$i]['end_date'] >= date('Y-m-d'))) {
                    $purchase_id_arr[$j] = $data[$i]['purchase_id'];
                    $j++;
                }
            }
        }

        if (count($purchase_id_arr) > 0) {
            $comma_separated = implode("','", $purchase_id_arr);
            $id_str = "'" . $comma_separated . "'";

            $purchase_query = Doctrine_Query::create()->select('DISTINCT p.email as email')->from('Purchase p');
            //$purchase_query = $purchase_query->where('p.checkout_status = ?',0);
            //$purchase_query = $purchase_query->andWhereIn('p.id', $purchase_id_arr);

            $query_str = 'p.id IN (' . $id_str . ') AND p.checkout_status = 1';
            $purchase_query = $purchase_query->where($query_str);

            $purchase_query_data = $purchase_query->fetchArray();

            for ($k = 0; $k < count($purchase_query_data); $k++) {
                //if(!in_array($purchase_query_data[$k]['email'], $only_email))
                $only_email[$k] = $purchase_query_data[$k]['email'];
            }
        }

        return $only_email;
    }

    /*
     *
     * This function return all data for particular purchase id.
     *
     */

    public function getProductListAndDateForPurchaseId($purchase_id) {
        $query = Doctrine_Query::create()->from('Subscription ss')->where('ss.purchase_id = ? ', $purchase_id);
        $data = $query->execute();
        return $data;
    }

    /*
     *
     * This function searches and returns start date and end date of subscriptions.
     *
     */

    public function getStartEndDateOfSubscription($purchase_id, $product_id) {
        $query = Doctrine_Query::create()->from('Subscription ss')->where('ss.purchase_id = ? AND ss.product_id = ?', array($purchase_id, $product_id));
        $data = $query->fetchOne();

        return $data;
    }

    /*
     *
     * This function returns all unique subscription query.
     *
     */

    public function getAllUniqueSubscriptionOfUserQuery($pur_id_str) {

        if ($pur_id_str && $pur_id_str !== '') {
            $rec_id = $product_id_arr = array();
            $query = Doctrine_Query::create()->select('ss.id,ss.product_id')->from('Subscription ss');
            $query_str = '( ss.purchase_id IN (' . $pur_id_str . ') )';
            $query = $query->where($query_str);
            $query = $query->orderBy('ss.end_date DESC');
            $data = $query->execute();
            $i = 0;
            foreach ($data as $rec) {
                if (!in_array($rec->product_id, $product_id_arr)) {
                    $product_id_arr[$i] = $rec->product_id;
                    $rec_id[$i] = $rec->id;
                    $i++;
                }
            }

            $id_str = implode(",", $rec_id);

            $query_1 = Doctrine_Query::create()->select('ss.id,ss.product_id')->from('Subscription ss');
            $query_str_1 = '( ss.id IN (' . ($id_str == '' ? '""' : $id_str ) . ') )';
            $query_1 = $query_1->where($query_str_1);

            return $query_1;
        }

        return '';
    }

}