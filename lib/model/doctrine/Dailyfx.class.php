<?php

/**
 * Dailyfx
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Dailyfx extends BaseDailyfx
{
	/**
	*
	* Gives the all of records in table dailyfx.
	* 
	*/
	public function getAllRecordFromDailyfx()
	{
		$query = Doctrine_Query::create()->from('Dailyfx dfx');
		$data = $query->execute();
		return $data;
	}
	
	/**
	*
	* Gives distinct time.
	* 
	*/
	public function getDistinctRecordTime()
	{
		$query = Doctrine_Query::create()
					->select('DISTINCT dfx.ad_tmstamp AS ad_tmstamp')
					->from('Dailyfx dfx');
		$data = $query->execute(array(), Doctrine_Core::HYDRATE_NONE);
		return $data;
	}
	 
	public function updateTable() 
	{  
		//Get file each monday
		$year = date('Y');
		$month = date('m');
		$currentDayInMonthNumber = date('d'); //1-31 depending on day and month
		$date = getdate();
		$weekDayNumberForThisWeek = $date['wday']; //1-7 depending on weekday
		$dayNumberForThisWeeksSunday = $this->leadingZeros($currentDayInMonthNumber - $weekDayNumberForThisWeek,2); //Calculate the date for this week's sunday
	
		$url = "https://www.dailyfx.com/files/Calendar-".$month."-".$dayNumberForThisWeeksSunday . "-". $year.".csv";
	
		$lines = $this->get_url_contents($url);
		
		$doctrine = Doctrine_Manager::getInstance()->getCurrentConnection()->getDbh();
		$doctrine->query('TRUNCATE TABLE dailyfx');
		unset($doctrine);
		
		$lines = explode("\n",$lines);
		$cnt=1;
		foreach ($lines as $line_num => $line) 
		{
			//Use info on first line as index for an array for each line
			if($line_num == 0) 
			{
				$keys = split(",",$line);
			}
			else 
			{
				//strlen used to avoid parsing empty lines
				if(strlen($line) > 10) 
				{
					//Split line by comma
					$lineSplit = split(",",$line);
					$lineArray = array();
					$index = ($line_num-10)/3;
	
					foreach($lineSplit as $key => $value) 
					{
						$keys[$key] = trim($keys[$key]);				
						$value = str_replace("\r", "", $value);
						$value = str_replace("\n", "", $value);					
						$value = str_replace("", "", $value);					
						$lineArray[$keys[$key]] = $value;
					}
					$lineArray["id"] = $cnt++;

			        $rec = new Dailyfx();
					$rec->ad_date = $lineArray['Date'];
					$rec->ad_time = $lineArray['Time'];
					$rec->ad_currency = $lineArray['Currency'];
					$rec->ad_description = mysql_escape_string($lineArray['Description']);
					$rec->ad_importance = mysql_escape_string($lineArray['Importance']);
					$rec->ad_actual = mysql_escape_string($lineArray['Actual']);
					$rec->ad_forecast = $lineArray['Forecast'];
					$rec->ad_previous = $lineArray['Previous'];
					$rec->ad_tmstamp = date('Y-m-d H:i:s');
					$rec->ad_tmzone = $lineArray['Time Zone'];
					$rec->save();

		//$query = "INSERT INTO dailyfx (id,ad_date,ad_time,ad_currency,ad_description,ad_importance,ad_actual,ad_forecast,ad_previous,ad_tmzone) VALUES('".$lineArray['id']."','".$lineArray['Date']."','".$lineArray['Time']."','".$lineArray['Currency']."','".mysql_escape_string($lineArray['Description'])."','".mysql_escape_string($lineArray['Importance'])."','".mysql_escape_string($lineArray['Actual'])."','".$lineArray['Forecast']."','".$lineArray['Previous']."','".$lineArray['Time Zone']."')";
		
				}
			}
		} 
	}
	
	
	public function leadingZeros($num,$numDigits) 
	{
		return sprintf("%0".$numDigits."d",$num);
	}
	
	public function get_url_contents($url) 
	{
		if (preg_match('/^([a-z]+):\/\/([a-z0-9-.]+)(\/.*$)/i', $url, $matches)) {
			$protocol = strtolower($matches[1]);
			$host = $matches[2];
			$path = $matches[3];
		} else {
			// Bad url-format
			return FALSE;
		}

		if ($protocol == "http") {
			$socket = fsockopen($host, 80);
		} else {
			// Bad protocol
			return FALSE;
		}

		if (!$socket) {
			// Error creating socket
			return FALSE;
		}

		$request = "GET $path HTTP/1.0\r\nHost: $host\r\n\r\n";
		$len_written = fwrite($socket, $request);

		if ($len_written === FALSE || $len_written != strlen($request)) {
			// Error sending request
			return FALSE;
		}

		$response = "";
		while (!feof($socket) && ($buf = fread($socket, 4096)) !== FALSE) {
			$response .= $buf;
		}

		if ($buf === FALSE) {
			// Error reading response
			return FALSE;
		}

		$end_of_header = strpos($response, "\r\n\r\n");
		return substr($response, $end_of_header + 4);
	}
}