<?php

/**
 * NewsletterAccount
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class NewsletterAccount extends BaseNewsletterAccount
{
   /*
	*
	* To get the rec count.
	*
	*/
	public function getNewsAccountCnt()
	{
		$qty = '';
		$query_str = "SELECT DISTINCT count(email) as qty FROM newsletter_account";
		$q = Doctrine_Manager::getInstance()->getCurrentConnection();
		$result = $q->execute($query_str);
		
		foreach($result as $rec)
		{
			$qty = $rec['qty'];
		}
		
		return $qty;
	}
	
   /*
	*
	* To get a perticular record.
	*
	*/
	public function getPerticularNewsAccountRecord($id)
	{
		$query = Doctrine_Query::create()->from('NewsletterAccount na')->where('na.id = ? ',$id);
		$data = $query->fetchOne();
		return $data; 
	}
	
   /*
	*
	* To add email address.
	*
	*/
	public function addEmail($email) 
	{
		$this->email = $email;
		$this->save();
	}
	
   /*
	*
	* To search similar email addresses.
	*
	*/
	public function getSimilarEmailAddressesQuery($email)
	{
		$query = Doctrine_Query::create()->from('NewsletterAccount na');
		$query = $query->where('na.email LIKE ?', '%'.$email.'%');
		$query = $query->orderBy('na.id DESC');
        return $query;
	}
	
   /*
	*
	* To get all records.
	*
	*/
	public function getAllNewsAccountRecordQuery()
	{
		$query = Doctrine_Query::create()->from('NewsletterAccount na');
		$query = $query->orderBy('na.id DESC');
        return $query;
	}
	
   /*
	*
	* This function returns array containing email addresses of certain criteria. 
	*
	*/
	public function getEmailForNewsletterUser($arr) 
	{ 
		$email_arr = array();
		$i = 0;
		
		$query_str = "SELECT u.email FROM newsletter_account n, sf_guard_user_profile u WHERE username != ' '";
		if (isset($arr["ej"])) 
		{
			if (isset($arr["s_abon"]) && $arr["s_abon"] != 0) $query_str .= " AND abonID != '{$arr["s_abon"]}'";
			if (isset($arr["s_stat"]) && $arr["s_stat"] != 0) $query_str .= " AND userstatID != '{$arr["s_stat"]}'";
		}
		else 
		{
			if (isset($arr["s_abon"]) && $arr["s_abon"] != 0) $query_str .= " AND abonID = '{$arr["s_abon"]}'";
			if (isset($arr["s_stat"]) && $arr["s_stat"] != 0) $query_str .= " AND userstatID = '{$arr["s_stat"]}'";
		}
		$query_str .= " AND u.email = n.email";

		$q = Doctrine_Manager::getInstance()->getCurrentConnection();
		$result = $q->execute($query_str);
		foreach($result as $rec)
		{
			$email_arr[$i++] = $rec['email'];
		}
		
		return $email_arr;	
	}
	
	
   /*
	*
	* This function returns array containing email addresses. 
	*
	*/
	public function getAllRegisteredEmailForNewsletterUser($arr) 
	{ 
		$email_arr = array();
		$i = 0;
		
		$query_str = "SELECT u.email FROM newsletter_account n, sf_guard_user_profile u WHERE username != '' AND u.email = n.email";
		$q = Doctrine_Manager::getInstance()->getCurrentConnection();
		$result = $q->execute($query_str);
		foreach($result as $rec)
		{
			$email_arr[$i++] = $rec['email'];
		}
		
		return $email_arr;	
	}
	
   /*
	*
	* To search a perticular email address.
	*
	*/
	public function isNewsAccountEmailPresent($email)
	{
		$query = Doctrine_Query::create()->from('NewsletterAccount na');
		$query = $query->where('na.email LIKE ?', '%'.$email.'%');
        $data = $query->fetchOne();
		return $data; 
	}
        
        public function isNewsLetterAccountEmailPresent($email)
	{
		$find_public_cri = Doctrine_Query::create()
						   ->from('NewsletterAccount n')
						   ->where('n.email = ?', $email);
		$public_data = $find_public_cri->fetchOne();
		return $public_data;
	}
        
        //code change by sandeep
        public function checkEmailInNewsletterAccount($email_id)
	{ 
		$query = Doctrine_Query::create()->from('NewsletterAccount na');
		$query = $query->where('na.email = ?', $email_id);
		$data = $query->fetchArray();
		return $data;
	}
        //code change by sandeep end

}