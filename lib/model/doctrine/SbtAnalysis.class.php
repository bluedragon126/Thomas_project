<?php

/**
 * SbtAnalysis
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SbtAnalysis extends BaseSbtAnalysis
{
	/*
	*
	* This function returns a perticular article.
	*
	*/
	
	public function getSelectedArticle($index) 
	{ 
		$selected_article_cri = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
						      ->where('sa.id = ?', $index);

		$selected_article_data = $selected_article_cri->fetchOne();
		return $selected_article_data;
	}
	
	/*
	*
	* To function returns loggedIn users latest article id.
	*
	*/
	
	public function getUserLatestArticleId($user_id) 
	{ 
		$latest_article_id_cri = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
						      ->where('sa.author_id = ?', $user_id)
							  ->orderBy('sa.id DESC');

		$latest_article_id_data = $latest_article_id_cri->fetchOne();
		return $latest_article_id_data ? $latest_article_id_data->id : '';
	}

	/*
	*
	* This function updates the vote count of a perticular article. 
	*
	*/
	
	public function updateVoteCount($article_id) 
	{ 
		$vote_details = new SbtVoteDetails();
		$cnt = $vote_details->getArticleVoteCount($article_id);
		
		$find_article_cri = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
						      ->where('sa.id = ?', $article_id);

		$one_article_data = $find_article_cri->fetchOne();
		
		if($one_article_data)
		{
			//$total = $one_article_data->analysis_votes;
			//$total = $total + 1;
			
			//$one_article_data->analysis_votes = $total;
			$one_article_data->analysis_votes = $cnt;
			$one_article_data->save();
		}
		else
		{
			//$total = '';
			$cnt = '';
		}
		
		//return $total;
		return $cnt;
	}
	
	/*
	*
	* This function updates the view count of a perticular article. 
	*
	*/
	
	public function updateViewCount($article_id) 
	{ 
		$one_article_data = $this->getSelectedArticle($article_id);
		
		if($one_article_data)
		{
			$total = $one_article_data->analysis_views;
			$total = $total + 1;
			
			$one_article_data->analysis_views = $total;
			$one_article_data->save();
		}
	}
	
	/*
	*
	* This function returns list of last articles.
	*
	*/
	
	public function getListOfSimilarSbtArticles($analysis_data,$limit) 
	{ 
		$limit = 25;
		$similar_article_cri = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
						      ->where('sa.analysis_object_id = ? AND sa.id != ?', array($analysis_data->analysis_object_id,$analysis_data->id))
							  ->orderBy('sa.created_at DESC')
							  ->offset(0)
							  ->limit($limit);

		$similar_article_data = $similar_article_cri->execute();
		$str = '<table cellpadding="0" cellspacing="0" border="0">';
		foreach($similar_article_data as $list)
		{
			$str .= '<tr><td style="color:#000000;">'.substr($list->created_at,0,10).'</td><td><a class="float_left" href="https://'.$_SERVER['HTTP_HOST'].'/sbt/sbtArticleDetails/article_id/'.$list->id.'" style="color:#174E96;">&nbsp;'.$list->analysis_title.'<a/></td></tr>';
		}
		$str .= '</table>';
		return $str;
	}
	/*
	*
	* This function returns list of last articles for display in charts.
	*
	*/
	public function getListOfSimilarSbtArticlesForChart($stock_name,$limit) 
	{ 
		$similar_article_cri = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
						      ->where('sa.analysis_title LIKE ?', "%".$stock_name."%")
                              ->andWhere('sa.published =?',1)
							  ->orderBy('sa.id DESC')
							  ->limit($limit);

		$similar_article_data = $similar_article_cri->execute();
		$str = '';
		foreach($similar_article_data as $list)
		{
			$str .= '<span style="color:#000000;">'.substr($list->created_at,0,10).'</span> <a href="https://'.$_SERVER['HTTP_HOST'].'/sbt/sbtArticleDetails/article_id/'.$list->id.'" style="color:#174E96;">'.$list->analysis_title.'<a/><br/>';
		}
		return $str;
	}    
	
   /*
	*
	* This function returns all publish analysis query.
	*
	*/
	
	public function getCategoriedAnalysisQuery($published_status,$column_id,$order) 
	{ 
		$query = Doctrine_Query::create()->from('SbtAnalysis sa');
		
		switch($published_status)
		{
			case '8': $query = $query->where('sa.published = ?', 8); break; // Unpublished Article
			case '1': $query = $query->where('sa.published = ?', 1); break; // Published Article
			case '2': $query = $query->where('sa.published = ?', 2); break; // Rejected Article
			case '3': $query->where('sa.published = ? AND sa.created_at >= ?', array(1, date('Y-m-d H:i:s')));  break; // Publish date yet to come
			case '5': $query = $query->where('sa.published = ?', 5); break; // Updated Article
		}
		
		switch($column_id)
		{
			case 'date': $query = $query->orderBy('sa.created_at '.$order); break;
			case 'title': $query = $query->orderBy('sa.analysis_title '.$order); break;
			case 'author': $query = $query->innerJoin('sa.sfGuardUser sUser')->innerJoin('sUser.SfGuardUserProfile profile');
			               $query = $query->orderBy('concat(profile.firstname," ",profile.lastname) '.$order); break;
			case 'status': $query = $query->orderBy('sa.published '.$order); break;
			case 'vote': $query = $query->orderBy('sa.analysis_votes '.$order); break;
		}
		
		if(!$column_id) $query = $query->orderBy('sa.created_at DESC');
		
		return $query;
	}


   /*
	*
	* This function returns all publish analysis query.
	*
	*/
	
	public function getPublishedAnalysisQuery($column_id,$order) 
	{ 
		$query = Doctrine_Query::create()->from('SbtAnalysis sa')->where('sa.published = ?', 1);
		
		switch($column_id)
		{
			case 'date': $query = $query->orderBy('sa.created_at '.$order); break;
			case 'title': $query = $query->orderBy('sa.analysis_title '.$order); break;
			case 'category': $query = $query->innerJoin('sa.SbtArticleCategory sbtCat'); $query = $query->orderBy('sbtCat.sbt_category_name '.$order); break;
			case 'type': $query = $query->innerJoin('sa.SbtArticleType sbtType'); $query = $query->orderBy('sbtType.type_name '.$order); break;
			case 'object': $query = $query->innerJoin('sa.SbtObject sbtObj'); $query = $query->orderBy('sbtObj.object_name '.$order); break;
			case 'default': $query = $query->orderBy('sa.created_at DESC'); break;
		}
		if(!$column_id) $query = $query->orderBy('sa.created_at DESC');
		
		return $query;
	}
	
   /*
	*
	* This function returns all the analysis according to clicked object query.
	*
	*/
	
	public function getClickedElementObjects($query,$colname,$id) 
	{ 
		if($colname=='sbt_kat_id') $query = $query->andWhere('sa.analysis_category_id = ?',$id);
		if($colname=='sbt_type_id') $query = $query->andWhere('sa.analysis_type_id = ?', $id);
		if($colname=='sbt_obj_id') $query = $query->andWhere('sa.analysis_object_id = ?', $id);

		return $query;
	}
	
   /*
	*
	* This function return query by specified order. 
	*
	*/
	public function setSortOrderForSbtQuery($query,$column_id,$order) 
	{ 
		$order = trim($order);
		switch($column_id)
		{
			case 'date': $query = $query->orderBy('sa.created_at '.$order); break;
			case 'title': $query = $query->orderBy('sa.analysis_title '.$order); break;
			case 'category': $query = $query->innerJoin('sa.SbtArticleCategory sbtCat'); $query = $query->orderBy('sbtCat.sbt_category_name '.$order); break;
			case 'type': $query = $query->innerJoin('sa.SbtArticleType sbtType'); $query = $query->orderBy('sbtType.type_name '.$order); break;
			case 'object': $query = $query->innerJoin('sa.SbtObject sbtObj'); $query = $query->orderBy('sbtObj.object_name '.$order); break;
		}
		if(!$column_id) $query = $query->orderBy('sa.created_at DESC');
		return $query;
	}
	
   /*
	*
	* This function returns query which contain all publish analysis in a specific order.
	*
	*/
	
	public function getPublishedAnalysisByOrderQuery($column_id,$order)
	{ 
		$query = Doctrine_Query::create()->from('SbtAnalysis sa')->where('sa.published = ?', 1);
						 
		switch($column_id)
		{
			case 'date': $query = $query->orderBy('sa.created_at '.$order); break;
			case 'title': $query = $query->orderBy('sa.analysis_title '.$order); break;
			case 'category': $query = $query->innerJoin('sa.SbtArticleCategory sbtCat'); $query = $query->orderBy('sbtCat.sbt_category_name '.$order); break;
			case 'type': $query = $query->innerJoin('sa.SbtArticleType sbtType'); $query = $query->orderBy('sbtType.type_name '.$order); break;
			case 'object': $query = $query->innerJoin('sa.SbtObject sbtObj'); $query = $query->orderBy('sbtObj.object_name '.$order); break;
			case 'default': $query = $query->orderBy('sa.created_at DESC'); break;
		}
		
//		echo $query->getSqlQuery();
		return $query;
	}

	
   /*
	*
	* This function returns query for specific type of analysis order.
	*
	*/
	public function getAnalysisOrderQuery($colname,$id,$column_id,$order) 
	{ 
		$query = Doctrine_Query::create()->from('SbtAnalysis sa');
		
		if($colname=='kat') $query = $query->where('sa.analysis_category_id = ? AND sa.published = ?', array($id,1));
		if($colname=='type') $query = $query->where('sa.analysis_type_id = ? AND sa.published = ?', array($id,1));
		if($colname=='obj') $query = $query->where('sa.analysis_object_id = ? AND sa.published = ?', array($id,1));

		switch($column_id)
		{
			case 'date': $query = $query->orderBy('sa.created_at '.$order); break;
			case 'title': $query = $query->orderBy('sa.analysis_title '.$order); break;
			case 'category': $query = $query->innerJoin('sa.SbtArticleCategory sbtCat'); $query = $query->orderBy('sbtCat.sbt_category_name '.$order); break;
			case 'type': $query = $query->innerJoin('sa.SbtArticleType sbtType'); $query = $query->orderBy('sbtType.type_name '.$order); break;
			case 'object': $query = $query->innerJoin('sa.SbtObject sbtObj'); $query = $query->orderBy('sbtObj.object_name '.$order); break;
			case 'default': $query = $query->orderBy('sa.created_at DESC'); break;
		}
		
		if(!$column_id) $query = $query->orderBy('sa.created_at DESC');
		//echo $query->getSqlQuery(); die;

		return $query;
	}
   
   /*
	*
	* This function saves the updated article data.
	*
	*/
	public function saveAnalysisData() 
	{
		$form_analysis_data['analysis_market_id'] = '';
	} 

	/*
	*
	* This function returns articles written by perticular user.
	*
	*/
	
	public function getAnalysisWrittenByUser($author_id,$limit) 
	{ 
		$query = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
						      ->where('sa.author_id = ?', $author_id)
							  ->orderBy('sa.created_at DESC')
							  ->offset(0)
							  ->limit($limit);

		$data = $query->execute();
		return $data;
	}	
	
   /*
	*
	* This function returns rec in specific order.
	*
	*/
	public function getSelectedAnalysis($comma_separated_id) 
	{ 
		$id_arr = explode(",", $comma_separated_id);
		
		$query = Doctrine_Query::create()->from('SbtAnalysis sa');
		$query->select('sa.*, FIELD(sa.id, '.$comma_separated_id.') AS field'); 
		$query->whereIn('sa.id', $id_arr); 
		$query->orderBy('field'); 
		$data = $query->execute(); 
		
		return $data;
	}
	
	/*
	*
	* This function returns top 5 analysis most viewed
	*
	*/
	public function getTopFiveMostViewedAnalysis() 
	{ 
		$query = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
							  ->orderBy('sa.analysis_views DESC')
							  ->offset(0)
							  ->limit(5);

		$data = $query->execute();
		return $data;
	}	

	/*
	*
	* This function returns top 5 analysis most voted
	*
	*/
	public function getTopFiveMostVotedAnalysis() 
	{ 
		$query = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
							  ->orderBy('sa.analysis_votes DESC')
							  ->offset(0)
							  ->limit(5);

		$data = $query->execute();
		return $data;
	}
	
	/*
	*
	* This function returns list of articles wrtitten by perticular user.
	*
	*/
	
	public function getListOfAnalysisWrittenByUser($analysis_data,$limit)
	{ 
		$query = Doctrine_Query::create()
	   					      ->from('SbtAnalysis sa')
						      ->where('sa.author_id = ? AND sa.id != ? and sa.created_at < ?', array($analysis_data->author_id,$analysis_data->id,date('Y-m-d H:i:s')))
							  ->orderBy('sa.created_at DESC')
							  ->offset(0)
							  ->limit($limit);
							  
		
		$limit = $limit ? $limit : 25;
		$similar_article_data = $query->execute();
		
		$str = '';
                $str .= '<table cellpadding="0" cellspacing="0" border="0">';
		foreach($similar_article_data as $list)
		{
			$str .= '<tr><td class="related_article_date">' .substr($list->created_at,0,10) . '</td><td><a class="related_article_title" href="https://' . $_SERVER['HTTP_HOST'] . '/sbt/sbtArticleDetails/article_id/'.$list->id.'">'.$list->analysis_title.'<a/></td></tr>';
		}
                $str .= '</table>';
		return $str;
	}
	
   /*
	*
	* This function saves article information.
	*
	*/
	public function setSelectedAnalysis($date,$title,$art_statid)
	{ 
		$this->created_at = $date;
		$this->analysis_title = $title;
		$this->published = $art_statid;
		$this->save();
	}	

   /*
	*
	* This function returns a perticular article.
	*
	*/
	public function deleteSbtAnalysis($index) 
	{ 
		$data = $this->getSelectedArticle($index); 
		
		if($data)
		{
			$data->delete();
		}
	}

           /*
	*
	* This function returns a perticular article.
	*
	*/
	public static function getCntPublishedArticles($author_id)
	{
            $q = Doctrine_Query::create()
                          ->select('COUNT(sa.author_id) AS num_articles')
                          ->from('SbtAnalysis sa')
                          ->where('sa.author_id = ?', $author_id)
                          ->andWhere('sa.published  = 1');

            $articles = $q->fetchArray();

            return $articles[0]['num_articles']; 
	}

}