<?php

/**
 * SfGuardUserProfile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SfGuardUserProfile extends BaseSfGuardUserProfile
{
	/*
	*
	* To check weither the kundnr exists or not.
	*
	*/
	
	public function kundnr_exists($kundnr) 
	{ 
		/* returns the true if the username exists */
		$kundnr_exists_cri = Doctrine_Query::create()
    						->from('SfGuardUserProfile u')
    						->where('u.kundnr = ?', $kundnr);
		$kundnrdata = $kundnr_exists_cri->fetchOne();
		
		if($kundnrdata)
			return 1;
		else
			return '';
	}
	/*
	*
	* This function takes firstname,lastname,postnr from the posted form as a input.
	* return kundnr
	*
	*/
	public function createKundnr($firstname,$lastname,$postnr) 
	{
		//Kundnr
		$initialer = mb_strtoupper(mb_substr(ltrim($firstname), 0, 1) . mb_substr(ltrim($lastname), 0, 1),'UTF-8');
		$postnr = str_replace(" ", "", trim($postnr));
		$kundnr = $initialer . $postnr;
	
		if ($this->kundnr_exists($kundnr)) 
		{
			$initialer = mb_strtoupper(mb_substr(ltrim($firstname), 0, 2) . mb_substr(ltrim($lastname), 0, 1),'UTF-8');
			$kundnr = $initialer . $postnr;
		}
		return $kundnr;
	}
		
	/*
	*
	* To check email exist or not.
	*
	*/
	public function checkEmail($profileForm_arr)
	{
	
		$mymarket = new mymarket();
		
		if($profileForm_arr["email"])
		{
		
			if($mymarket->is_valid_email($profileForm_arr["email"]))
			{
			
				if($mymarket->email_exists($profileForm_arr["email"]))
					$email_red = 'E-post finns redan';
				else
					$email_red = '';
			}
			else
				$email_red = 'Ogiltig';
		}
		else
			$email_red = 'Nödvändig';
		
		return $email_red;
	}
        
        
        //code change by sandeep
        public function checkEmailEditProfile($profileForm_arr)
	{
	
		$mymarket = new mymarket();
		
		if($profileForm_arr["email"])
		{
		
			if($mymarket->is_valid_email($profileForm_arr["email"]))
			{

			}
			else
				$email_red = 'Invalid';
		}
		else
			$email_red = 'Required';
		
		return $email_red;
	}
        //code change by sandeep end
	
	/*
	*
	* To check that the email is valid and user with that username does not exist.
	*
	*/
	public function checkUsernameAlias($profileForm_arr)
	{	
	
		$mymarket = new mymarket();
		
		if($mymarket->usernamealias_exists($profileForm_arr["usernamealias"]))
			$email_red = 'Alias finns redan';
		else
			$email_red = '';
		
		return $email_red;
	}
	
	/*
	*
	* To check that the email is valid and only logged In user is having that email address.
	*
	*/
	public function checkEmailAsUsernameOfUser($profileForm_arr)
	{
		$mymarket = new mymarket();
		
		if($profileForm_arr["email"])
		{
			if($mymarket->is_valid_email($profileForm_arr["email"]))
			{
				$emailUserData = $this->fetch_user_from_email($profileForm_arr["email"]);
				if($emailUserData)
				{
					if($emailUserData->user_id != $profileForm_arr["user_id"])	$email_red = 'user with this email already exisist';
					else $email_red = '';
				}
				else
				{
					$usernameUserData = $this->fetch_user($profileForm_arr["email"]);
					if($usernameUserData)
					{
						if($usernameUserData->id != $profileForm_arr["user_id"])	$email_red = 'user with this username already exisist';
						else $email_red = '';
					}
				}
			}
			else
				$email_red = 'Invalid';
		}
		else
			$email_red = 'Required';
		
		return $email_red;
	}
	
	
	/*
	*
	* To check that the email is valid and only logged In user is having that email address.
	*
	*/
	public function checkEmailForEditUser($profileForm_arr)
	{
		$mymarket = new mymarket();
		
		if($profileForm_arr["email"])
		{
			if($mymarket->is_valid_email($profileForm_arr["email"]))
			{
				$emailUserData = $this->fetch_user_from_email($profileForm_arr["email"]);
				if($emailUserData)
				{
					if($emailUserData->user_id != $profileForm_arr["user_id"])	$email_red = 'user with this email already exisist';
					else $email_red = '';
				}
				else
					$email_red = '';
			}
			else
				$email_red = 'Invalid';
		}
		else
			$email_red = 'Required';
		
		return $email_red;
	}
	
	
	/*
	*
	* To check that the username is valid and only logged In user is having that username.
	*
	*/
	public function checkUsernameForEditUser($profileForm_arr)
	{
		$mymarket = new mymarket();
		
		if($profileForm_arr["username"])
		{
			if(is_numeric($profileForm_arr["username"])) 
				$username_red = 'Anvndarnamnet fr inte best av enbart siffror.';
			elseif($mymarket->specCharCheck($profileForm_arr["username"]) > 0)
				$username_red = 'Ange korrekt anvndarnamn.';
			else
			{
				$usernameUserData = $this->fetch_user($profileForm_arr["username"]);
				if($usernameUserData)
				{
					if($usernameUserData->id != $profileForm_arr["user_id"])	$username_red = 'user with this username already exisist';
					else $username_red = '';
				}
				else $username_red = '';
			}
		}
		else
			$username_red = 'Required';
		
		return $username_red;
	}
	
	
	/*
	*
	* To check secound password.
	*
	*/
	public function checkPass($password)
	{
		$mymarket = new mymarket();
		
		if($password)
		{
			if($mymarket->script_check($password) > 0)
			{
				return 3;
			}
			else	
				return 0;
		}
		else
			return 1;
	}
	
	/*
	*
	* To check username.
	*
	*/
	public function checkUsername($username)
	{ 
		$mymarket = new mymarket();
		
		if($username)
		{
			if($mymarket->username_exists($username))
				$username_red = 'username already exist';
			elseif(is_numeric($username)) 
				$username_red = 'Anvndarnamnet fr inte best av enbart siffror';
			elseif($mymarket->specCharCheck($username) > 0)
				$username_red = 'Ange korrekt anvndarnamn';
			elseif(strlen(trim($username))==0)
				$username_red = 'Ange korrekt anvndarnamn';
			else
				$username_red = '';
		}
		else
			$username_red = 'Required';
					
		return $username_red;
	}
	
	/*
	*
	* To check script tags.
	*
	*/
	public function checkScriptTags($word)
	{
		$mymarket = new mymarket();
		
		if($word)
		{
			if($mymarket->specCharCheck($word) > 0)
			{
				return 2;
			}
			else
			{
				$txt = trim($word);
				if(strlen($txt) == 0) return 1;
				else return 0;
			}	
				
		}
		else
			return 1;
	}
	
	/*
	*
	* To check birth date of user.
	*
	*/
	public function checkBithDate($year)
	{
		if($year == 0) return 1;
		if($year > 0) return 0;
	}
	
	/*
	*
	* To check gender of user.
	*
	*/
	public function checkGender($gender)
	{
		if(!$gender) return 1;
		if($gender) return 0;
	}
	
	/*
	*
	* To check city name.
	*
	*/
	public function checkCity($word)
	{
            
            $txtWtApace = str_replace(' ','',trim($word));
            if(strlen($txtWtApace) == 0)
		 return 1;
            return 0;
				
				
		
	}
	
	/*
	*
	* To check zipcode tags.
	*
	*/
	public function checkZipcode($zipcode,$land)
	{ 
       
			//$txt = trim($zipcode);
			//$txt = $zipcode;
			if(strlen($zipcode) == 0) return 1;
			
			if($land == 'SE')
			{ 
				$txt = $zipcode; //removed trim as client want 1 space
				$txtWtApace = str_replace(' ','',trim($zipcode));
				$len=0;
				if(strlen($txtWtApace) == 0)
				    return 1; 
				
				
			}
                        return 0;
			
		
	}	
	
	/*
	*
	* To check phonenumber tags.
	*
	*/
	public function checkPhonenumber($number)
	{
	    $txtWtApace = str_replace(' ','',trim($number));
            if(strlen($txtWtApace) == 0)
		 return 1;
            return 0;
		
	}	

	/*
	*
	* To check weither the user exists or not.
	*
	*/
	
	public function login_check($username,$password) 
	{ 
		/* returns the 1 if the username exists */
		$user_exists_cri = Doctrine_Query::create()
							->from('SfGuardUser u')
							->where('u.username = ?', $username);
		$userdata = $user_exists_cri->fetchOne();

		if($userdata)
		{
			$entered_pwd = md5($password);
			if($userdata['password']==$entered_pwd)
				return 1;
			else
				return 0;
		}
		else
			return 0;
	}

	/*
	*
	* Returns all data related to user.
	*
	*/
	
	public function fetch_user($username) 
	{ 
		/* returns the 1 if the username exists */
		$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUser u')
							->where('u.username = ?', $username);
		$userdata = $fetch_user_cri->fetchOne();
		
		if($userdata)
			return $userdata;
		else
			return '';
	}
	
	/*
	*
	* Returns all user profile data related to user.
	*
	*/
	
	public function fetch_user_profile($username) 
	{ 
		/* returns the 1 if the username exists */
		if(strlen(trim($username)) > 0)
		{
			$fetch_user_cri = Doctrine_Query::create()
								->from('SfGuardUserProfile u')
								->where('u.username = ?', $username);
			$userdata = $fetch_user_cri->fetchOne();
		}
			
		if($userdata)
			return $userdata;
		else
			return '';
	}
	
	/*
	*
	* Update record when ever user logs In.
	*
	*/
	
	public function update_user_profile($user_id) 
	{ 
		$login_cnt = 0;
		$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where('u.user_id = ?', $user_id);
		$userdata = $fetch_user_cri->fetchOne();
		
		if($userdata)
		{
			$login_cnt = (int)$userdata->inlog + 1;
			
			$update_cri = Doctrine_Query::create()
       						->update('SfGuardUserProfile sfg')
       						->set('sfg.inlog', '?', $login_cnt)
							->set('sfg.inlogdate', '?', date("Y-m-d H:i"))
       						->where('sfg.user_id = ?', $user_id);

    		$updated = $update_cri->execute();
		}
	}
	
   /*
	*
	* Returns weither user is Admin or new user.
	*
	*/
	
	public function how_is_user($id) 
	{ 
		$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUser u')
							->where('u.id = ?', $id);
		$userdata = $fetch_user_cri->fetchOne();
		$name = '';
		if($userdata)
		{
			$name = $userdata->is_super_admin == 1 ? 'Admin' : 'Spekulant';
			return $name;
		}
		else
			return $name;
	}
	
   /*
	*
	* Returns the no. of votes received by a perticular user.
	*
	*/
	
	public function getTotalVotesReceived($id) 
	{ 
		$query = Doctrine_Query::create()->from('SbtVoteDetails svd');
		$query = $query->select('count(`author_id`) as vote_cnt');
		$query = $query->where('svd.author_id = ?', $id); 
		$query = $query->groupBy('svd.author_id');
	    $query = $query->orderBy('count(`author_id`) DESC');
		
		$data = $query->fetchArray();
		return $data[0]['vote_cnt'];
	}
	
   /*
	*
	* Returns the no. of messages received by a perticular user.
	*
	*/
	
	public function getTotalMessagesReceived($id) 
	{ 
		/*$all_useranalysis_cri = Doctrine_Query::create()
								->from('SbtAnalysis sa')
								->where('sa.author_id = ?', $id);
								
		$all_analysis = $all_useranalysis_cri->execute();
		
		$analysis_ids = array();
		foreach($all_analysis as $data)
		{
			$analysis_ids[] = $data->id;
		}
        
		if(count($analysis_ids)==0) return 0;
		else
		{
			$rec_cnt_cri = Doctrine_Query::create()
						->from('SbtAnalysisComment sac')
    					->whereIn('sac.analysis_id', $analysis_ids);
			
			$rec_cnt_data = $rec_cnt_cri->execute();
			return count($rec_cnt_data);
		}*/
		
		$rec_cnt_cri = Doctrine_Query::create()
						->from('SbtMessages sm')
    					->where('sm.message_to = ?', $id);
			
		$rec_cnt_data = $rec_cnt_cri->execute();
		return count($rec_cnt_data);
	}
	
	/*
	*
	* Returns user profile from email.
	*
	*/
	
	public function fetch_user_from_email($email) 
	{ 
		$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where('u.email = ?', $email);
		$userdata = $fetch_user_cri->fetchOne();
		if($userdata)
			return $userdata;
		else
			return '';
	}
	
	/*
	*
	* Saves new password for the user who is from borstjanaren.
	*
	*/
	
	public function reset_password_for_borst($id, $newpassword) 
	{ 
		$query = Doctrine_Query::create()
       		   ->update('SfGuardUser sgu')
               ->set('sgu.password', '?', md5($newpassword))
			   ->set('sgu.algorithm', '?', '')
               ->where('sgu.id = ?', $id);

    	$updated = $query->execute();
	}
	
	/*
	*
	* This fucntion checks change Password Form.
	*
	*/
	
	public function changePassFormCheck($arr,$user_data) 
	{ 
		$msg = "";
		
		if (empty($arr["old_pass"])) 		{	$msg .= "OBS! Gamla lösenord krävs<br/>";	 } 
		if (empty($arr["new_pass"])) 		{	$msg .= "OBS! Nytt lösenord krävs<br/>";	 } 
		if (empty($arr["repeat_new_pass"])) {	$msg .= "OBS! Bekräfta nytt lösenord krävs";	 } 
		
		if(strlen($msg) == 0)
		{
			if($user_data)
			{
				if($user_data->salt=='NULL' && $user_data->algorithm=='NULL')
				{
					
					if(md5($arr['old_pass']) == $user_data->password)
					{	
						if($arr["new_pass"] == $arr["repeat_new_pass"])	
						{
							$profile = new SfGuardUserProfile(); 
							$profile->reset_password_for_borst($user_data->id, $arr["new_pass"]);
						}
						else {	$msg .= "OBS! Nytt lösenord och Bekräfta nytt lösenord matchar inte<br/>";	}
					}
					else {	$msg .= "OBS! Den trädde gamla lösenordet är fel.<br/>";	} 
				}
				
				if($user_data->salt!='NULL' && $user_data->algorithm=='md5')
				{
					if($user_data->checkPassword($arr["old_pass"]))
					{	
						if($arr["new_pass"] == $arr["repeat_new_pass"])	
						{
							$user_data->password = $arr["new_pass"];
							$user_data->save();
						}
						else {	$msg .= "OBS! Nytt lösenord och Bekräfta nytt lösenord matchar inte<br/>";	}
					}
					else {	$msg .= "OBS! Den trädde gamla lösenordet är fel..111<br/>";	} 
				}
			}
		}
		return $msg;
	}
	
	/*
	*
	* This function returns the age of user. 
	*
	*/
	
	public function getUserAge($id) 
	{ 
		$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where('u.user_id = ?', $id);
		$userdata = $fetch_user_cri->fetchOne();
		
		if($userdata)
			return date("Y") - $userdata->year_of_birth;
		else
			return '';
	}
	
	/*
	*
	* This function returns the user data. 
	*
	*/
	
	public function getUserData($id) 
	{ 
		$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where('u.user_id = ?', $id);
		$userdata = $fetch_user_cri->fetchOne();
		
		if($userdata) return $userdata;
		else return '';
	}
	
	/*
	*
	* This returns firstname and lastname of user. 
	*
	*/
	
	public function getFullUserName($id) 
	{ 
		$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where('u.user_id = '.$id);
                                                        //->where('u.user_id = '.$id.' and use_alias = 0');
		$userdata = $fetch_user_cri->fetchOne();
		
		if($userdata) 
		{
			return ($userdata->usernamealias) ? $userdata->usernamealias : $userdata->firstname.' '.$userdata->lastname;
		}
		/*if(!$userdata)
		{
			$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where('u.user_id = '.$id.' and use_alias = 1');
			$userdata = $fetch_user_cri->fetchOne();
			
			return $userdata ? $userdata->usernamealias : '';
		}*/
		
		
		else return '';
	}
	
	/*
	*
	* Returns record from SfGuardUser table.
	*
	*/
	
	public function fetchOneUser($id) 
	{ 
		$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUser u')
							->where('u.id = ?', $id);
		$userdata = $fetch_user_cri->fetchOne();
		
		if($userdata)
			return $userdata;
		else
			return '';
	}

   /*
	*
	* Returns the no. of messages received by a perticular user.
	*
	*/
	
	public function getUserBlogCount($user_id) 
	{ 
		$rec_cnt_cri = Doctrine_Query::create()
					->from('SbtUserBlog sub')
					->where('sub.author_id = ?', $user_id);
		
		$rec_cnt_data = $rec_cnt_cri->execute();
		return count($rec_cnt_data);
	}
	
   /*
	*
	* Returns record if there is any friend request sent.
	*
	*/
	
	public function friendRequestCheck($contactor_id, $contactee_id) 
	{ 
		$friend_cri_1 = Doctrine_Query::create()->from('SbtFriendRequest fr')->where('fr.contactor_id = ? AND fr.contactee_id = ?',array($contactor_id,$contactee_id));
		$friend_data_1 = $friend_cri_1->fetchOne();
		
		if($friend_data_1)
		{ 
			if($friend_data_1->status == 2 || $friend_data_1->status == 4) return 0;
			else return 1;
			//return $friend_data_1;
		}
		else
		{
			$friend_cri_2 = Doctrine_Query::create()->from('SbtFriendRequest fr')->where('fr.contactor_id = ? AND fr.contactee_id = ?', array($contactee_id, $contactor_id));
			$friend_data_2 = $friend_cri_2->fetchOne();
			
			if($friend_data_2)
			{
				if($friend_data_2->status == 2 || $friend_data_2->status == 4) return 0;
				else return 1;
			}
			else return 0;
			//return $friend_data_2;
		}
	}
	
   /*
	*
	* This function updates the friends request.
	*
	*/
	
	public function updateFriendRequest($form) 
	{ 
		$contactor_id = $form->getValue('contactor_id');
		$contactee_id = $form->getValue('contactee_id');
		$message = $form->getValue('message');
		
		$update_flag = 	0;
		
		$friend_cri_1 = Doctrine_Query::create()->from('SbtFriendRequest fr')->where('fr.contactor_id = ? AND fr.contactee_id = ?',array($contactor_id,$contactee_id));
		$friend_data_1 = $friend_cri_1->fetchOne();
		
		if($friend_data_1)
		{ 
			if($friend_data_1->status == 2 || $friend_data_1->status == 4)
			{
				$friend_data_1->status = 0;
				$friend_data_1->message = $message;
				$friend_data_1->save();
				$update_flag = 	1;
				return $update_flag;
			}
		}
		else
		{
			$friend_cri_2 = Doctrine_Query::create()->from('SbtFriendRequest fr')->where('fr.contactor_id = ? AND fr.contactee_id = ?', array($contactee_id, $contactor_id));
			$friend_data_2 = $friend_cri_2->fetchOne();
			
			if($friend_data_2)
			{ 
				if($friend_data_2->status == 2 || $friend_data_2->status == 4)
				{
					$friend_data_2->status = 0;
					$friend_data_2->message = $message;
					$friend_data_2->save();
					$update_flag = 	1;
					return $update_flag;
				}
			}
			else return $update_flag;
		}
	}
	
   /*
	*
	* Returns all the friends of a perticular user.
	*
	*/
	
	public function fetchAllFriend($user_id) 
	{ 
		$friend_cri_1 = Doctrine_Query::create()
					  ->from('SbtFriendRequest sfr')
					  ->where('sfr.contactor_id = ? OR sfr.contactee_id = ?', array($user_id,$user_id))
					  ->andWhere('sfr.status = ?', 1);
		//echo $friend_cri_1->getSqlQuery(); die;
		$friend_data_1 = $friend_cri_1->execute();
		return $friend_data_1;
	}
	
	/*
	*
	* This function returns all forum post of a specific user.
	*
	*/
	
	public function getUserForumCount($name) 
	{ 
		$all_forum_post_cri = Doctrine_Query::create()
						  ->from('Btforum btf')
						  ->where('btf.skapare = ? AND btf.amne= ?', array($name,'ja'))
						  ->orderBy('btf.andratdatum DESC');
			  		
		$all_forum_post_data = $all_forum_post_cri->execute();
		return count($all_forum_post_data);
	}
	
   /*
	*
	* This function returns list of users. 
	*
	*/
	
	public function getUserFromFullName($author_name) 
	{ 
		$id_arr = array();
		$name_arr = explode(' ',$author_name);

		if(count($name_arr) == 1) 
		{
			$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where('u.firstname = ?', $name_arr[0]);
			$userdata = $fetch_user_cri->fetchOne();
		}

		if(count($name_arr) == 2)
		{
			$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where('u.firstname = ? AND u.lastname = ?', array($name_arr[0],$name_arr[1]));
			$userdata = $fetch_user_cri->fetchOne();
		}
		
		
		if($userdata) return $userdata->user_id;
		
		return false;
	}
	
  /*
	*
	* To function all user related counts.
	*
	*/
	
	public function getAllUserCount()
	{ 
		$test_id_arr = array(1,4);
		$invioce_id_arr = array(2,5);
		$count_arr = array();
			
		$testcnt_cri = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$testcnt_cri = $testcnt_cri->select('COUNT(username) AS uname');
		$testcnt_cri = $testcnt_cri->where('sup.userstatid != ?',4);
		$testcnt_cri = $testcnt_cri->whereIn('sup.abonid', $test_id_arr);
		$data = $testcnt_cri->fetchArray();
		$count_arr['prov_cnt'] = $data[0]['uname'];
		
		$invoicecnt_cri = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$invoicecnt_cri = $invoicecnt_cri->select('COUNT(username) AS uname');
		$invoicecnt_cri = $invoicecnt_cri->where('sup.userstatid != ?',4);
		$invoicecnt_cri = $invoicecnt_cri->whereIn('sup.abonid', $invioce_id_arr);
		$data1 = $invoicecnt_cri->fetchArray();
		$count_arr['invoice_cnt'] = $data1[0]['uname'];
		
		$autogiro_cnt_cri = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$autogiro_cnt_cri = $autogiro_cnt_cri->select('COUNT(username) AS uname');
		$autogiro_cnt_cri = $autogiro_cnt_cri->where('sup.abonid =?',3);
		$autogiro_cnt_cri = $autogiro_cnt_cri->andWhere('sup.userstatid != ?',4);
		$data2 = $autogiro_cnt_cri->fetchArray();
		$count_arr['autogiro_cnt'] = $data2[0]['uname'];
		
		$count_arr['aktiva_cnt'] = $count_arr['prov_cnt'] + $count_arr['invoice_cnt'] + $count_arr['autogiro_cnt'];
		
		$zero_inlogg_cnt_cri = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$zero_inlogg_cnt_cri = $zero_inlogg_cnt_cri->select('COUNT(username) AS uname');
		$zero_inlogg_cnt_cri = $zero_inlogg_cnt_cri->where('sup.inlog =?',0);
		$data3 = $zero_inlogg_cnt_cri->fetchArray();
		$count_arr['zero_inlogg_cnt'] = $data3[0]['uname'];
		
		$inlogg_cnt_cri = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$inlogg_cnt_cri = $inlogg_cnt_cri->select('COUNT(username) AS uname');
		$inlogg_cnt_cri = $inlogg_cnt_cri->where('sup.inlog > 0');
		$inlogg_cnt_cri = $inlogg_cnt_cri->andWhere('sup.inlog = ?',1);
		$data5 = $inlogg_cnt_cri->fetchArray();
		$count_arr['inlogg_cnt'] = $data5[0]['uname'];

		$two_to_five_inlogg_cnt_cri = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$two_to_five_inlogg_cnt_cri = $two_to_five_inlogg_cnt_cri->select('COUNT(username) AS uname');
		$two_to_five_inlogg_cnt_cri = $two_to_five_inlogg_cnt_cri->where('sup.inlog > 1');
		$two_to_five_inlogg_cnt_cri = $two_to_five_inlogg_cnt_cri->andWhere('sup.inlog < 6');
		$data6 = $two_to_five_inlogg_cnt_cri->fetchArray();
		$count_arr['two_to_five_inlogg_cnt'] = $data6[0]['uname'];
			
		$six_to_ten_inlogg_cnt_cri = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$six_to_ten_inlogg_cnt_cri = $six_to_ten_inlogg_cnt_cri->select('COUNT(username) AS uname');
		$six_to_ten_inlogg_cnt_cri = $six_to_ten_inlogg_cnt_cri->where('sup.inlog > 5');
		$six_to_ten_inlogg_cnt_cri = $six_to_ten_inlogg_cnt_cri->andWhere('sup.inlog < 11');
		$data7 = $six_to_ten_inlogg_cnt_cri->fetchArray();
		$count_arr['six_to_ten_inlogg_cnt'] = $data7[0]['uname'];
		
		$eleven_above_inlogg_cnt_cri = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$eleven_above_inlogg_cnt_cri = $eleven_above_inlogg_cnt_cri->select('COUNT(username) AS uname');
		$eleven_above_inlogg_cnt_cri = $eleven_above_inlogg_cnt_cri->where('sup.inlog > 10');
		$data8 = $eleven_above_inlogg_cnt_cri->fetchArray();
		$count_arr['eleven_above_inlogg_cnt'] = $data8[0]['uname'];

//		echo $q1->getSqlQuery(); die;		
		return $count_arr;
	}
	
	/*
	*
	* This function returns string which contains searched parameters for search user.
	*
	*/
	
	public function getSearchedUserParameterString($arr,$column_id,$order)
	{ 
		$query = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		if($arr['tempname'] && $arr['tempname']!='')
		{ 
			$query = $query->where("sup.firstname LIKE '%".$arr['tempname']."%'");
			$query = $query->orWhere("sup.lastname LIKE '%".$arr['tempname']."%'");
			$query = $query->orWhere("sup.email LIKE '%".$arr['tempname']."%'");
			$query = $query->orWhere("sup.kundnr LIKE '%".$arr['tempname']."%'");
			$query = $query->orWhere("sup.zipcode LIKE '%".$arr['tempname']."%'");
			$query = $query->orWhere("sup.city LIKE '%".$arr['tempname']."%'");
			$query = $query->orWhere("sup.username LIKE '%".$arr['tempname']."%'");
		}
		if($arr['inlog1'] && $arr['inlog1']!= 0) $query = $query->andWhere("sup.inlog >= ?",$arr['inlog1']);
		if($arr['inlog2'] && $arr['inlog2']!= 0) $query = $query->andWhere("sup.inlog <= ?",$arr['inlog2']);
		if($arr['s_abon'] && $arr['s_abon']!= 0) $query = $query->andWhere("sup.abonid = ?",$arr['s_abon']);
		if($arr['user_status_arr'] && $arr['user_status_arr']!= 0) $query = $query->andWhere("sup.userstatid = ?",$arr['user_status_arr']);
		//if($arr['sort_order']) $query = $query->orderBy('sup.regdate '.$arr['sort_order']);
		if($arr['no_of_pages']) $no_of_pages = $arr['no_of_pages'];
		
		switch($column_id)
		{
			case 'regdate': $query = $query->orderBy('sup.regdate '.$order); break;
			case 'betdate': $query = $query->orderBy('sup.betdate '.$order); break;
			case 'stopdate': $query = $query->orderBy('sup.stopdate '.$order); break;
			case 'kundnr': $query = $query->orderBy('sup.kundnr '.$order); break;
			case 'username': $query = $query->orderBy('sup.username '.$order); break;
			case 'firstname': $query = $query->orderBy('sup.firstname '.$order); break;
			case 'lastname': $query = $query->orderBy('sup.lastname '.$order); break;
			case 'city': $query = $query->orderBy('sup.city '.$order); break;
			case 'email': $query = $query->orderBy('sup.email '.$order); break;
			
			case 'abonid': $query = $query->leftJoin('sup.Abon abn');
			               $query = $query->orderBy('abn.abon_name '.$order); break;
			
			case 'userstatid': $query = $query->leftJoin('sup.UserStatus ust');
			                   $query = $query->orderBy('ust.userstat '.$order); break;
			
			case 'inlog': $query = $query->orderBy('sup.inlog '.$order); break;
			case 'inlogdate': $query = $query->orderBy('sup.inlogdate '.$order); break;
			
			case 'total': $query = $query->innerJoin('sup.sfGuardUser sUser')->leftJoin('sUser.UserTransaction utran'); 
			              $query = $query->groupBy('sUser.id');
						  $query = $query->orderBy('count(utran.amount_added) '.$order); break;
			
			case 'default': $query = $query->orderBy('sup.regdate DESC'); break;
		}
		if(!$column_id) $query = $query->orderBy('sup.regdate DESC');
		
		//echo $query->getSqlQuery();
		return $query;
	}
	
   /*
	*
	* This function returns array of users friend id.
	*
	*/
	
	public function getFriendIds($id,$all_friends)
	{
		$friend_id = array();
		foreach($all_friends as $friend)
		{ 
			if($friend->contactor_id == $id)
				$friend_id[] = $friend->contactee_id;

			if($friend->contactee_id == $id)
				$friend_id[] = $friend->contactor_id;
		}
		return $friend_id;
	}

   /*
	*
	* This function returns array of users friend names.
	*
	*/
	
	public function getFriendNames($id,$all_friends)
	{
		$friend_name = array();
		foreach($all_friends as $friend)
		{ 
			if($friend->contactor_id == $id)
				$friend_name[] = substr($this->getFullUserName($friend->contactee_id),0,strpos($this->getFullUserName($friend->contactee_id), ' '));
			
			if($friend->contactee_id == $id)
				$friend_name[] = substr($this->getFullUserName($friend->contactor_id),0,strpos($this->getFullUserName($friend->contactor_id), ' '));
		}
		return $friend_name;
	}
	
   /*
	*
	* This function sets session sorting parameters for backend.
	*
	*/
	
	public function setSortingParameters($page,$search_user_column_order,$column_id,$current_column,$set_column,$set_column_order)
	{
		if($page)
			$order = $search_user_column_order;
		else
		{
			if($current_column == $column_id)
			{ 
				$order = sfContext::getInstance()->getUser()->getAttribute($set_column_order,'','userProperty');
				if($order == 'ASC') 
                                    {
                                        $order = 'DESC';    
                                    }
                                else 
                                    {
                                        $order = 'ASC'; 
                                    }
		
				sfContext::getInstance()->getUser()->setAttribute($set_column_order,$order,'userProperty');
			}
			else
			{ 
				sfContext::getInstance()->getUser()->setAttribute($set_column,$column_id,'userProperty');
				sfContext::getInstance()->getUser()->setAttribute($set_column_order,'ASC','userProperty');
				$order = 'ASC';
			}
		}
		
		return $order;
	}
	
	
   /*
	*
	* This function updates selected users.
	*
	*/
	public function updateSelectedUsers($arr)
	{ 
		if($arr['user_ids'])
		{ 
			foreach ($arr['user_ids'] as $key => $value)
			{
				$record = $this->getUserData($value);
							
				if ($arr["stopdate"][$key] != "") 
				{ 
					// Update according to form.
					$stopdate = trim($arr["stopdate"][$key]);
	
					if(!strpos($stopdate, '-'))// new added
					{
						if (strlen($stopdate) == 8) 
							$stopdate = substr($stopdate,0,4) . "-" . substr($stopdate,4,2). "-" . substr($stopdate,6,2); 
					}
							
					if (strlen($stopdate) == 2)	$stopdate = date("Y-m-") . $stopdate;
						elseif (strlen($stopdate) == 4)
					$stopdate = date("Y-") . substr($stopdate,0,2) . "-" . substr($stopdate,2,4);
							
					$record->stopdate = $stopdate;
				}
				
				if ($arr["betdate"][$key] != "") 
				{
					$betdate = trim($arr["betdate"][$key]);
					
					if(!strpos($betdate, '-'))// new added
					{
						if (strlen($betdate) == 8) 
						$betdate = substr($betdate,0,4) . "-" . substr($betdate,4,2). "-" . substr($betdate,6,2); 
					}
					
					if (strlen($betdate) == 2)	$betdate = date("Y-m-") . $betdate;
					elseif (strlen($betdate) == 4)
					$betdate = date("Y-") . substr($betdate,0,2) . "-" . substr($betdate,2,4);

					$record->betdate = $betdate;
				}
						
				$record->abonid = $arr["sel_abonID"][$key];
				$record->userstatid = $arr["sel_userstatID"][$key];
				$record->regdate = $arr["regdate"][$key];
				$record->save();
						
				// Update any status to paid
				foreach ($arr["chb_update_to_betald"] as $keyBee => $valueBee) 
				{
					if ($value === $valueBee) 
					{ 
						$selected_record = $this->getUserData($value) ;
						
						$abonID = $selected_record->abonid;
						$stopdate = $selected_record->stopdate;

						// Move the cut-off date 30 days
						if (($stopdate != "") && ($stopdate !='0000-00-00'))
						{
							$dates    		= explode("-", $stopdate);
							$year      		= $dates['0'];
							$month      	= $dates['1'];
							$day     		= $dates['2'];
							$new_stopdate 	= date("Y-m-d",mktime(0,0,0,$month,$day+30,$year));
						}
						// Or if an end date is blank it means 30 days from the date date
						else 
						{
							$new_date = strtotime("+30 days");
							$new_stopdate = date("Y-m-d",$new_date);
						}
						
						$selected_record->userstatid = 3;
						$selected_record->stopdate = $new_stopdate;
						
						// Test is amended to invoice
						if ($abonID == 1)
							$selected_record->abonid = 2;
						
						$selected_record->save();
					}
				}
						
				if ($arr["pay_amount"][$key] != "") 
				{
					if ($arr["pay_amount"][$key] > 0) 
					{
						$tr_data = new UserTransaction();
						$tr_data->saveUserTransaction($value,$arr["pay_amount"][$key]);
					}
				}
			} 
		} 
	}
	
   /*
	*
	* This function deletes the selected user.
	*
	*/
	public function deleteUser($id)
	{
		$user_data = $this->getUserData($id);
		if($user_data) $user_data->delete();
	}
	
   /*
	*
	* This function resets the user password.
	*
	*/
	public function resetUserPassword($id)
	{
		$user_data = $this->fetchOneUser($id);
		$mymarket = new mymarket();
		$new_pass = $mymarket->generate_password();
		
		if($user_data)
		{
			if($user_data->salt=='NULL' && $user_data->algorithm=='NULL')
				$this->reset_password_for_borst($user_data->id, $new_pass);
			
			if($user_data->salt!='NULL' && $user_data->algorithm=='md5')
			{
				$user_data->password = $new_pass;
				$user_data->save();
			}
			
			sfContext::getInstance()->getUser()->setAttribute('reseted_pass',$new_pass,'userProperty');
			sfContext::getInstance()->getUser()->setAttribute('reseted_pass_user_id',$id,'userProperty');
		}
	}
	
   /*
	*
	* This function returns a array which contains user to whom the remind email is to be sent.
	*
	*/
	public function getRemindUserListByEmail($arr,$in_clause,$in_clause_abon)
	{
		$uname[] = array();
		$j = 0;
		
		if($in_clause!="" && $in_clause_abon!="")
		{ 
			$query = Doctrine_Query::create()->from('SfGuardUserProfile sup');
			
			$query_str = '( sup.userstatid IN ('.$in_clause.') AND sup.abonid IN ('.$in_clause_abon.') ) AND ( ';
		    
			$txt_username = $arr['txt_remind_users'];

			if(strlen($txt_username) > 0)
			{
				$mail_to = explode(",",$txt_username);
				$i = 0;
				foreach($mail_to as $key=>$email) 
				{ 
					$email = trim($email);
					if ($i >= 1) $query_str .= " OR";
						$query_str .= " sup.email = '$email'";
					$i++;
				}
				$query_str .= ")";
			}
			$query = $query->where($query_str);
			//echo $query->getSqlQuery(); die;
			$data = $query->execute();
			foreach($data as $rec)
			{ 
				$uname[$j] =  $rec->username;	
				$j++;
			}
		}
		return $uname;
	}
	
   /*
	*
	* This function returns a array which contains user to whom the remind email is to be sent.
	*
	*/
	public function getRemindUserListByCheckBox($arr,$in_clause,$in_clause_abon,$no_of_days)
	{
		$uname[] = array();
		$j = 0;
		
		if($in_clause!="" && $in_clause_abon!="")
		{ 
			$query = Doctrine_Query::create()->from('SfGuardUserProfile sup');
			$query_str = 'sup.userstatid IN ('.$in_clause.') AND abonid IN ('.$in_clause_abon.')';
			$query = $query->where($query_str);
			//echo $query->getSqlQuery(); 
			$data = $query->execute();
			foreach($data as $rec)
			{
				$start = date('Y-m-d H:i:s');
				$end = $rec->stopdate;
				
				$start_ts = strtotime($start);
				$end_ts = strtotime($end);
				
				$diff = $start_ts - $end_ts;
				$diff = round($diff / 86400);
				
				if($no_of_days < 0) //Check the past days at past stop dates.
				{  
					if($diff > 0)
					{
						$days = $no_of_days * -1;
						if($diff <= $days)
						{ 
							$uname[$j] =  $rec->username;	
						}
					}
				}
				else //Check the coming dates including today.
				{
					if($diff <= 0)
					{
						$diff = $diff * -1;
						if($diff <= $no_of_days)
						{
							$uname[$j] =  $rec->username;	
						}
					}
				}
				$j++;
			} 
		}
		return $uname;
	}
	
   /*
	*
	* To function assign user to group.
	*
	*/
	public function setGroupOfUser($arr)
	{ 
		$user_id_arr = array();
		$i = 0;
		$group = Doctrine::getTable('sfGuardGroup')->findOneByName('SbtArticlePublisher');
		if($group) $group_id = $group->id;
	
		foreach ($arr['user'] as $key => $value) 
		{
			//echo 'user id:'.$key.' = '.$value.'<br/>';
			$user = $this->fetchOneUser($key); 
			
			if($value == 'p')
			{
				if(!$user->hasGroup('SbtArticlePublisher'))
				{
					$user->addGroupByName('SbtArticlePublisher');
					$user_id_arr[$i] = 'p_'.$user->id;
					$i++;
				}
			}
			
			if($value == 'r')
			{
				if($user->hasGroup('SbtArticlePublisher'))
				{
					if($group_id && $key) 
					{	
						$this->removeGroupByName($group_id,$key); 
						$user_id_arr[$i] = 'r_'.$user->id;
						$i++;
					}
				}
			}
			
			
		}
		return $user_id_arr;
	}
	
   /*
	*
	* To function remove a user from group.
	*
	*/
	public function removeGroupByName($group_id,$user_id)
	{ 
		$query = Doctrine_Query::create()->from('sfGuardUserGroup userGrp');
		$query = $query->where('userGrp.user_id = ? AND userGrp.group_id = ?', array($user_id,$group_id));
		
		$data = $query->execute();	
		$data->delete();   
	}
	
   /*
	*
	* To function returns array of email addresses.
	*
	*/
	public function getEmailOfSelectedUsers($arr)
	{ 
		$email_arr = array();
		$i = 0;
		
		$query = Doctrine_Query::create()->from('SfGuardUserProfile sup')->whereIn('sup.user_id', $arr);
		$data = $query->execute();	

		foreach($data as $rec)
		{
			$email_arr[$i++] = $rec->email;
		}
		return $email_arr;		
	}
	
   /*
	*
	* To function resets the request status.
	*
	*/
	public function resetRequestStatus($arr,$request_status)
	{ 
		for($i=0; $i<count($arr); $i++)
		{
			$query = Doctrine_Query::create()->from('SbtPublisherRequest spr')->where('spr.author_id = ?', $arr[$i]);
			$data = $query->fetchOne();
			
			if($data)
			{
				if($request_status==1)
				{
					$data->request_status = $request_status;
                	$data->save();
				}
				if($request_status==2)
				{
					$data->delete();
				}
			}	
	
		}
	}
	
   /*
	*
	* To function resets the request status.
	*
	*/
	public function isApplyedForPublisher($id)
	{ 
		$query = Doctrine_Query::create()->from('SbtPublisherRequest spr')->where('spr.author_id = ?', $id);
		$data = $query->fetchOne();
		$val = '';
		
		if($data)			
		{ 
			if($data->request_status == 0) $val = 1;
			if($data->request_status == 2) $val = 2;
		}
		else
			$val = 3;
			
		return $val;
	}
	
	/*
	*
	* To update the username which is in sfGuardUser table.
	*
	*/
	public function updateUsername($id,$uname)
	{
		if($id)
		{
			$fetch_user_cri = Doctrine_Query::create()->from('SfGuardUser u')->where('u.id = ?', $id);
			$userdata = $fetch_user_cri->fetchOne();
			if($userdata)
			{
				$userdata->username = $uname;
				$userdata->save();
			}

		}
	}
	
	/*
	*
	* This function returns list of user as per key pressed.
	*
	*/
	public function getUserNameList()
	{
		$query = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$query = $query->select('sup.firstname, sup.lastname');
		$data = $query->fetchArray();
		$str = '';
		for($i=0; $i<count($data); $i++) 
		{	
			$str .= $data[$i]['firstname'].' '.$data[$i]['lastname'].',';  
		}

        return $str;
	}
	
	/*
	*
	* This function returns data with modified date.
	*
	*/
	public function getUserDataForWelcomeMail($email)
	{ 
		$query_str = "SELECT kundnr, abonID, userstatID, firstname, username, abonID, user_id, lastname, email, from_sbt, sbt_activation_code, 
					  SUBSTRING(regdate,1,10) as start,
					  DATE_ADD(SUBSTRING(regdate,1,10), INTERVAL 31 DAY) as stopdate,
					  DATE_ADD(SUBSTRING(regdate,1,10), INTERVAL 92 DAY) as stoppOS,
					  DATE_ADD(SUBSTRING(regdate,1,10), INTERVAL 10 DAY) as betdate
					  FROM sf_guard_user_profile WHERE email = '$email'";
	
		$q = Doctrine_Manager::getInstance()->getCurrentConnection();
		$stmt = $q->prepare($query_str);
		$stmt->execute();
		$data = $stmt->fetch(PDO::FETCH_OBJ);
		return $data;
	}
	
	/*
	*
	* Returns Firstnamme and lastname from id.
	*
	*/
	public function fetchFirstnameLastname($id) 
	{ 
		$query = Doctrine_Query::create()
	   					      ->select('sup.firstname,sup.lastname')
							  ->from('SfGuardUserProfile sup')
							  ->where('sup.user_id = ?', $id);

		$data = $query->fetchArray();
		return $data;
	}
	
	/*
	*
	* Returns Regdate and inlagg for specific user.
	*
	*/
	public function fetchRegdateAndTotalLogin($author_name) 
	{ 
		$id_arr = array();
		$name_arr = explode(' ',$author_name);

		if(count($name_arr) == 1) 
		{
			$fetch_user_cri = Doctrine_Query::create()
 			                ->select('u.regdate,u.inlog')
							->from('SfGuardUserProfile u')
							->where('u.firstname = ?', $name_arr[0]);
			$data = $fetch_user_cri->fetchArray();
		}

		if(count($name_arr) == 2)
		{
			$fetch_user_cri = Doctrine_Query::create()
							->select('u.user_id,u.regdate,u.inlog')
							->from('SfGuardUserProfile u')
							->where('u.firstname = ? AND u.lastname = ?', array($name_arr[0],$name_arr[1]));
			$data = $fetch_user_cri->fetchArray();
		}
		
		if($data) return $data;
		return false;
	}

        public function fetchRegdateAndTotalLoginById($authorId)
	{
		$fetch_user_cri = Doctrine_Query::create()
 			                ->select('u.regdate,u.inlog')
							->from('SfGuardUserProfile u')
							->where('u.user_id = ?', $authorId);
			$data = $fetch_user_cri->fetchArray();



		if($data) return $data;
		return false;
	}

	
   /*
	*
	* Returns sbt_active and sbt_activation_code fields from perticular activation code.
	*
	*/
	public function getActivationRecord($activation_code) 
	{ 
		if($activation_code > 0)
		{
			$query = Doctrine_Query::create()->from('SfGuardUserProfile sup');
			$query = $query->where('sup.sbt_activation_code = ?', $activation_code);
			$data = $query->fetchOne();
			
			if($data)
			{
				if($data->sbt_active == 1) { return 1; }
				else
				{
					$data->sbt_active = 1; 
					$data->save();
					return 2;
				}
			}
			else
			{
				return 3;
			}
		}
		else
		{
			return 3;
		}
	}
	
   /*
	*
	* Returns sbt_active, from_sbt from user_id.
	*
	*/
	public function getActiveStatus($id) 
	{ 
		$query = Doctrine_Query::create()
	   					      ->select('sup.sbt_active,sup.from_sbt')
							  ->from('SfGuardUserProfile sup')
							  ->where('sup.user_id = ?', $id);

		$data = $query->fetchArray();
		return $data;
	}
	
   /*
	*
	* To function returns query for which contains all users by specified order.
	*
	*/
	
	public function getTopFiveMostVotedUser($limit) 
	{ 
		/*$query = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$query = $query->innerJoin('sup.sfGuardUser sfUser'); 
	    $query = $query->leftJoin('sfUser.SbtAnalysis sbtAnalysis'); 
	    $query = $query->leftJoin('sbtAnalysis.SbtVoteDetails sbtVote');
	    $query = $query->groupBy('sfUser.id');
	    $query = $query->orderBy('count(sbtVote.article_id) DESC');
		$query = $query->offset(0);
		$query = $query->limit($limit);	*/
		
		$query = Doctrine_Query::create();
		$query = $query->select('count(sbtVote.author_id) as cnt,sup.user_id,sup.firstname,sup.lastname');
		$query = $query->from('SfGuardUserProfile sup');
		$query = $query->innerJoin('sup.sfGuardUser sfUser'); 
	    $query = $query->leftJoin('sfUser.SbtVoteDetails sbtVote'); 
	    $query = $query->groupBy('sfUser.id');
	    $query = $query->orderBy('cnt DESC');
		$query = $query->offset(0);
		$query = $query->limit($limit);

		$data = $query->execute();
		//echo $query->getSqlQuery(); die;
		return $data;
	}
	
   /*
	*
	* To function returns query for which contains all users by specified order.
	*
	*/
	
	public function getTopFiveMostVotedUserInLastWeek($limit) 
	{ 
		$query = Doctrine_Query::create();
		$query = $query->select('count(sbtVote.author_id) as cnt,sup.user_id,sup.firstname,sup.lastname');
		$query = $query->from('SfGuardUserProfile sup');
		$query = $query->innerJoin('sup.sfGuardUser sfUser'); 
	    $query = $query->leftJoin('sfUser.SbtVoteDetails sbtVote'); 
		$query = $query->where('sbtVote.created_at between "'.date('Y-m-d 00:00:00',strtotime("-7 day")).'" AND "'.date('Y-m-d 23:59:59',time()).'"');
	    $query = $query->groupBy('sfUser.id');
	    $query = $query->orderBy('cnt DESC');
		$query = $query->offset(0);
		$query = $query->limit($limit);	

		$data = $query->execute();
//		echo $query->getSqlQuery(); die;
		return $data;
	}
	
   /*
	*
	* To function returns top five most active users.
	*
	*/
	
	public function getTopFiveMostActiveUser($limit) 
	{ 
		$query = Doctrine_Query::create();
		$query = $query->select('count(sbtVote.author_id) as cnt,sup.user_id,sup.firstname,sup.lastname, sup.activity_cnt');
		$query = $query->from('SfGuardUserProfile sup');
		$query = $query->innerJoin('sup.sfGuardUser sfUser'); 
	    $query = $query->leftJoin('sfUser.SbtVoteDetails sbtVote'); 
	    $query = $query->groupBy('sfUser.id');
	    $query = $query->orderBy('sup.activity_cnt DESC');
		$query = $query->offset(0);
		$query = $query->limit($limit);

		$data = $query->execute();
		//echo $query->getSqlQuery(); die;
		return $data;
	}
	
   /*
	*
	* To function returns query for which contains all users by specified order.
	*
	*/
	
	public function getAllMostVotedUser() 
	{ 
		/*$query = Doctrine_Query::create()->from('SfGuardUserProfile sup');
		$query = $query->innerJoin('sup.sfGuardUser sfUser'); 
	    $query = $query->leftJoin('sfUser.SbtAnalysis sbtAnalysis'); 
	    $query = $query->leftJoin('sbtAnalysis.SbtVoteDetails sbtVote');
	    $query = $query->groupBy('sfUser.id');
	    $query = $query->orderBy('count(sbtVote.article_id) DESC');
		$query = $query->offset(0);
		$query = $query->limit($limit);	*/
		
		$query = Doctrine_Query::create();
		$query = $query->select('count(sbtVote.author_id) as cnt,sup.id');
		$query = $query->from('SfGuardUserProfile sup');
		$query = $query->innerJoin('sup.sfGuardUser sfUser'); 
	    $query = $query->leftJoin('sfUser.SbtVoteDetails sbtVote'); 
	    $query = $query->groupBy('sfUser.id');
	    $query = $query->orderBy('cnt DESC');
//		$query = $query->offset(0);
	//	$query = $query->limit($limit);	
		

		$data = $query->execute();
		
		return $data;
	}
	
   /*
	*
	* Returns the no. of activities.
	*
	*/
	public function getTotalActivitiesOfUser($id,$username) 
	{ 
		$total = 0;
		
		$analysis_cnt_query = Doctrine_Query::create()
		                        ->select('count(`author_id`) as analysis_cnt')
								->from('SbtAnalysis sa')
								->where('sa.author_id = ?', $id);
								
		$all_analysis_data = $analysis_cnt_query->fetchArray();
		$analysis_cnt = $all_analysis_data[0]['analysis_cnt'];
		
		$blog_cnt_query = Doctrine_Query::create()
		                        ->select('count(`author_id`) as blog_cnt')
								->from('SbtUserBlog sub')
								->where('sub.author_id = ?', $id);
								
		$all_blog_data = $blog_cnt_query->fetchArray();
		$blog_cnt = $all_blog_data[0]['blog_cnt'];
		
		$forum_cnt_query = Doctrine_Query::create()
		                        ->select('count(`id`) as forum_cnt')
								->from('Btforum btf')
								->where('btf.skapare LIKE ? AND btf.amne= ?', array('%'.$username.'%','ja'));
//		echo $forum_cnt_query->getSqlQuery(); die;						
		$all_forum_data = $forum_cnt_query->fetchArray();
		$forum_cnt = $all_forum_data[0]['forum_cnt'];
		
		$total = $analysis_cnt + $blog_cnt + $forum_cnt;
		
		return $total;
	}
	
   /*
	*
	* This function returns query which fetches all the users on userToplisterListing.
	*
	*/
	
	public function getAllTopUserQuery($column_id,$order,$type) 
	{
		$query = Doctrine_Query::create();
		$query = $query->select('count(sbtVote.author_id) as cnt,sup.user_id,sup.firstname,sup.lastname,sup.activity_cnt');
		$query = $query->from('SfGuardUserProfile sup');
		$query = $query->innerJoin('sup.sfGuardUser sfUser'); 
	    $query = $query->leftJoin('sfUser.SbtVoteDetails sbtVote'); 
	    
		//if($type == 'lastweek') 
			//$query = $query->where('sbtVote.created_at between "'.date('Y-m-d 00:00:00',strtotime("-7 day")).'" AND "'.date('Y-m-d 23:59:59',time()).'"');
		
		$query = $query->groupBy('sfUser.id');
//	    $query = $query->orderBy('cnt DESC');
		
		switch($column_id)
		{
			case 'author': 	$query = $query->orderBy('concat(sup.firstname," ",sup.lastname) '.$order); break;
			case 'vote':  	$query = $query->orderBy('cnt '.$order); break;
			case 'activity': $query = $query->orderBy('sup.activity_cnt '.$order); break;
			case 'default': $query = $query->orderBy('cnt DESC'); break;
		}
		
		if(!$column_id)
		{
			if($type == 'vote') $query->orderBy('cnt DESC');
			else $query->orderBy('sup.activity_cnt DESC');
		} 	
		
		
		return $query;
		
				/*SELECT sum( a1 )
		FROM (
		
		SELECT count( `author_id` ) AS a1
		FROM sbt_analysis
		WHERE author_id =80
		UNION
		SELECT count( `author_id` ) AS a1
		FROM sbt_user_blog
		WHERE author_id =80
		UNION
		SELECT count( `id` ) AS a1
		FROM btforum
		WHERE skapare LIKE '%Ajay Borawake%'
		AND amne = 'ja'
		) AS y 
*/	}

   /*
	*
	* Update activity count.
	*
	*/
	public function updateActivityCount($id) 
	{ 
		$cnt = 0;
		$data = $this->getUserData($id);
		$cnt = $data->activity_cnt;
		$cnt = $cnt + 1;
		$data->activity_cnt = $cnt;
		$data->save();
	}
    
    public static function getMatchingUserIdFromUserName($author_name)
    {
		$id_arr = array();
		$name_arr = explode(' ',$author_name);
 
		if(count($name_arr) == 1) 
		{
			$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where("u.firstname LIKE '%".$name_arr[0]."%' OR u.lastname LIKE '%".$name_arr[0]."%'");
			$userdata = $fetch_user_cri->execute();
		}

		if(count($name_arr) == 2)
		{
			$fetch_user_cri = Doctrine_Query::create()
							->from('SfGuardUserProfile u')
							->where("u.firstname LIKE '%".$name_arr[0]."%'  AND u.lastname LIKE '%".$name_arr[1]."%'");
			$userdata = $fetch_user_cri->execute();
		}
        $user_id_string = '';		
		if($userdata)
        {
            foreach($userdata as $data)
            {
                $user_id_string = $data->user_id.",".$user_id_string;        
            }
            $len=strlen($user_id_string);
            $user_id_string=substr($user_id_string,0,($len-1));
            if($user_id_string)
                return $user_id_string;
            else
                return 12112121212121212;                
        }
		return 121212121212121212;
    }
	
   /*
	*
	* Returns kundnr
	*
	*/
	
	public function fndKundnr($id) 
	{ 
		$query = Doctrine_Query::create()->from('SfGuardUserProfile u');
		$query = $query->select('u.kundnr');
		$query = $query->where('u.user_id = ?', $id); 
		
		$data = $query->fetchArray();
		return $data[0]['kundnr'] !='' ? $data[0]['kundnr'] : '-';
		
		
	}

           /*
	*
	* Returns all the friends of a perticular user.
	*
	*/

	public static function chkForFriend($userId,$chkId)
	{
                
		$friendC = Doctrine_Query::create()
					  ->from('SbtFriendRequest sfr')
                                          ->Where('sfr.status = ?', 1) //check for friend request accepted status
					  ->andwhere('sfr.contactor_id = ? And sfr.contactee_id = ?', array($userId,$chkId))
                                          ->Orwhere('sfr.contactor_id = ? And sfr.contactee_id = ?', array($chkId,$userId));
		
		$friendData = $friendC->fetchOne();
               
                if($friendData)
                    return 'true';
                else
                {
                    $friendC = Doctrine_Query::create()
					  ->from('SbtFriendRequest sfr')
                                          ->whereIn('sfr.status', array(0,3)) // Check for unanswered and blocked friend request
					  ->andwhere('sfr.contactor_id = ? And sfr.contactee_id = ?', array($userId,$chkId))
                                          ->Orwhere('sfr.contactor_id = ? And sfr.contactee_id = ?', array($chkId,$userId));

                    $friendData = $friendC->fetchOne();
                    if($friendData)
                        return 'pending';
                    else
                        return false;
                }
	}
 public function getCurrentAge(){
            return date("Y") - $this->year_of_birth;
        }

        public function isPublisher(){
  
            $result = $this->getSfGuardUser()->hasGroup('SbtArticlePublisher');

            return $result && $result == true  ? 1 : 0;
             
        }
  
}