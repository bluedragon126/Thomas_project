<?php

/**
 * BtNewsletterSubscriber
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BtNewsletterSubscriber extends BaseBtNewsletterSubscriber
{
   
    public function isNewsLetterSubscriberEmailPresent($email)
    {
        $find_public_cri = Doctrine_Query::create()
                                           ->from('BtNewsletterSubscriber n')
                                           ->where('n.email = ?', $email);
        $public_data = $find_public_cri->fetchOne();
        return $public_data;
    }
    
    public function addSubscriberEmail($email, $userId, $newsletterTypeId) 
    {
        $this->email = $email;
        $this->user_id = $userId;
        $this->newsletter_type_id = $newsletterTypeId;
        $this->is_subscribed = 1;
        $this->save();
    }        
    
   /**
	*
	* This function adds new registered user in newsletter subscribtion list.
	*
	*/
	public function addRegUserToSubscriptions($user_id,$email) 
	{ 
		$btNewsletterType = new BtNewsletterType();
		$all_type = $btNewsletterType->getAllNewsletterType();
		
		foreach($all_type as $data)
		{
			$btNewsletterSubscriber = new BtNewsletterSubscriber();
			$btNewsletterSubscriber->user_id = $user_id;
			$btNewsletterSubscriber->email = $email;
			$btNewsletterSubscriber->newsletter_type_id = $data->id;
			$btNewsletterSubscriber->is_subscribed = 1;
			$btNewsletterSubscriber->save();
		}
	}
	
   /**
	*
	* This function adds new non registered user in newsletter subscribtion list.
	*
	*/
	public function addNonRegUserToSubscriptions($user_id,$email, $activation_code) 
	{ 
		$btNewsletterType = new BtNewsletterType();
		$all_type = $btNewsletterType->getAllNewsletterType();
		
		foreach($all_type as $data)
		{
			if($data->id != 4)
			{
				$btNewsletterSubscriber = new BtNewsletterSubscriber();
				$btNewsletterSubscriber->user_id = $user_id;
				$btNewsletterSubscriber->email = $email;
				$btNewsletterSubscriber->newsletter_type_id = $data->id;
				$btNewsletterSubscriber->is_subscribed = 0;
                                $btNewsletterSubscriber->sbt_activation_code = $activation_code;
				$btNewsletterSubscriber->save();
			}
		}
	}
	
   /**
	*
	* This function removes user from newsletter subscribtion list.
	*
	*/
	public function removeUserFromSubscriptions($user_id,$email) 
	{ 
		$rec_present = $this->fetchUsersSubscriptions($email);
		
		foreach($rec_present as $data)
		{
			if($data->newsletter_type_id != 4)
			{
				$data->is_subscribed = 0;
				$data->save();
			}
		}
	}
	
   /**
	*
	* This function modifies non reg user to reg user.
	*
	*/
	public function modifyNonRegToRegForSubscription($user_id,$email) 
	{ 
		$rec_present = $this->fetchUsersSubscriptions($email);
		
		if(count($rec_present) > 0)
		{ 
			foreach($rec_present as $data)
			{
				$data->user_id = $user_id;
				if($data->newsletter_type_id == 4) $data->is_subscribed = 1;
				$data->save();
			}
		}
		else
		{
			$this->addRegUserToSubscriptions($user_id,$email);
		}
	}

   /**
	*
	* This function searches users of specific newsletter.
	*
	*/
	public function searchForSpecifiedSubscriber($arr) 
	{ 
		$temp_arr = $arr['news'];
		if(count($arr['news']) > 0 )
		{
			$email_arr = array();
			$i = 0;
			
			$type_id_str = implode(",", $temp_arr);
			
			//$query = Doctrine_Query::create()->from('BtNewsletterSubscriber bns')->whereIn('bns.newsletter_type_id = ? AND bns.newsletter_type_id', $temp_arr);
			$query = Doctrine_Query::create()->from('BtNewsletterSubscriber bns');
			//echo $query->getSqlQuery();
			
			$query_str = '( bns.newsletter_type_id IN ('.$type_id_str.') AND bns.is_subscribed = 1 )';
			$query = $query->where($query_str);
		    $query = $query->groupBy('bns.email');
			
			$data = $query->execute();	
	
			foreach($data as $rec)
			{
				$email_arr[$i++] = $rec->email;
			}
			return $email_arr;	
		}
	}


   /**
	*
	* This function returns all record.
	*
	*/
	public function fetchUsersSubscriptions($email) 
	{ 
		$query = Doctrine_Query::create()->from('BtNewsletterSubscriber bns')->where('bns.email = ?',$email);
		$data = $query->execute();
		return $data;
	}
        
        /**
	*
	* This function returns all record.
	*
	*/
	public function fetchBtUsersSubscriptions($email) 
	{ 
		$query = Doctrine_Query::create()->from('BtNewsletterSubscriber bns')->where('bns.email = ?',$email);
		$data = $query->fetchArray();
		return $data;
	}

   /**
	*
	* This function updates the user records.
	*
	*/
	public function updateUserNewsletterSubscription($arr) 
	{       $status_arr = array();
                $user_rec = $this->fetchUsersSubscriptions($arr['email']); 
       
                foreach($user_rec as $data)
                {
                        $status_arr[$data->newsletter_type_id] = $data->newsletter_type_id;
                }
		$rec_present = $this->fetchUsersSubscriptions($arr['email']);
		$temp_arr = $arr['news'];

		if(count($rec_present) > 0)
		{
                        $i = 0;
			foreach($rec_present as $i=>$data)
			{				
                            if (in_array($data->newsletter_type_id, $temp_arr))
                            {
                                $data->is_subscribed = 1;
                            }
                            else
                            {
                                if(in_array(4, $arr['news'])){

                                    $containsSearch = count(array_intersect($temp_arr, $status_arr)) == count($temp_arr);                                                
                                    if ($containsSearch)
                                    {
                                        $data->is_subscribed = 0;     
                                    }
                                    else
                                    {
                                        if($i == 0){
                                            $btNewsletterSubscriber = new BtNewsletterSubscriber();
                                            $btNewsletterSubscriber->user_id = $arr['user_id'];
                                            $btNewsletterSubscriber->email = $arr['email'];
                                            $btNewsletterSubscriber->newsletter_type_id = 4;
                                            $btNewsletterSubscriber->is_subscribed = 1;
                                            $btNewsletterSubscriber->save();
                                        }
                                    }
                                }else{
                                    $data->is_subscribed = 0;
                                }
                            }
                            $data->save();
                            $i++;
			}
		}
		else
		{
			$btNewsletterType = new BtNewsletterType();
			$all_type = $btNewsletterType->getAllNewsletterType();
			
			if(count($arr['news']) > 0 )
			{
                            foreach($all_type as $data)
                            {
                                    $btNewsletterSubscriber = new BtNewsletterSubscriber();
                                    $btNewsletterSubscriber->user_id = $arr['user_id'];
                                    $btNewsletterSubscriber->email = $arr['email'];
                                    $btNewsletterSubscriber->newsletter_type_id = $data->id;

                                    if (in_array($data->id, $temp_arr)) $btNewsletterSubscriber->is_subscribed = 1;
                                    else $btNewsletterSubscriber->is_subscribed = 0;

                                    $btNewsletterSubscriber->save();
                            }
			}			
		}
	}
        
        
        public function fetchUsersSubscriptionsDaily($email) 
	{ 
		$query = Doctrine_Query::create()->from('BtNewsletterSubscriber bns')->where('bns.email = ?',$email)->addWhere('bns.newsletter_type_id = ?', 4);
		$data = $query->execute();
		return $data;
	}
        /**
	*
	* This function updates the user records.
	*
	*/
	public function updateUserNewsletterSubscriptionDaily($arr) 
	{       $status_arr = array();
                $user_rec = $this->fetchUsersSubscriptionsDaily($arr['email']); 
       
                foreach($user_rec as $data)
                {
                        $status_arr[$data->newsletter_type_id] = $data->newsletter_type_id;
                }
		$rec_present = $this->fetchUsersSubscriptionsDaily($arr['email']);
		$temp_arr = $arr['news'];

		if(count($rec_present) > 0)
		{
                    $i = 0;
                    foreach($rec_present as $i=>$data)
                    {
                        if (in_array($data->newsletter_type_id, $temp_arr))
                        {
                            $data->is_subscribed = 1;
                        }
                        else
                        {
                                $data->is_subscribed = 0;                                            
                        }
                        $data->save();
                        $i++;
                    }
		}
		else
		{
                    $btNewsletterType = new BtNewsletterType();
                    $all_type = $btNewsletterType->getAllNewsletterType();

                    if(count($arr['news']) > 0 )
                    {
                        foreach($all_type as $data)
                        {
                            $btNewsletterSubscriber = new BtNewsletterSubscriber();
                            $btNewsletterSubscriber->user_id = $arr['user_id'];
                            $btNewsletterSubscriber->email = $arr['email'];
                            $btNewsletterSubscriber->newsletter_type_id = $data->id;

                            if (in_array($data->id, $temp_arr)) $btNewsletterSubscriber->is_subscribed = 1;
                            else $btNewsletterSubscriber->is_subscribed = 0;

                            $btNewsletterSubscriber->save();
                        }
                    }			
		}
	}
}