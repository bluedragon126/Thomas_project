<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Users', 'doctrine');

/**
 * BaseUsers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $username
 * @property string $kundnr
 * @property string $password
 * @property integer $abonid
 * @property integer $userstatid
 * @property string $priv
 * @property integer $year_of_birth
 * @property integer $gender
 * @property string $firstname
 * @property string $lastname
 * @property string $co
 * @property string $street
 * @property string $zipcode
 * @property string $city
 * @property integer $land
 * @property string $email
 * @property string $phone
 * @property timestamp $regdate
 * @property date $stopdate
 * @property date $betdate
 * @property integer $inlog
 * @property timestamp $inlogdate
 * 
 * @method string    getUsername()      Returns the current record's "username" value
 * @method string    getKundnr()        Returns the current record's "kundnr" value
 * @method string    getPassword()      Returns the current record's "password" value
 * @method integer   getAbonid()        Returns the current record's "abonid" value
 * @method integer   getUserstatid()    Returns the current record's "userstatid" value
 * @method string    getPriv()          Returns the current record's "priv" value
 * @method integer   getYearOfBirth()   Returns the current record's "year_of_birth" value
 * @method integer   getGender()        Returns the current record's "gender" value
 * @method string    getFirstname()     Returns the current record's "firstname" value
 * @method string    getLastname()      Returns the current record's "lastname" value
 * @method string    getCo()            Returns the current record's "co" value
 * @method string    getStreet()        Returns the current record's "street" value
 * @method string    getZipcode()       Returns the current record's "zipcode" value
 * @method string    getCity()          Returns the current record's "city" value
 * @method integer   getLand()          Returns the current record's "land" value
 * @method string    getEmail()         Returns the current record's "email" value
 * @method string    getPhone()         Returns the current record's "phone" value
 * @method timestamp getRegdate()       Returns the current record's "regdate" value
 * @method date      getStopdate()      Returns the current record's "stopdate" value
 * @method date      getBetdate()       Returns the current record's "betdate" value
 * @method integer   getInlog()         Returns the current record's "inlog" value
 * @method timestamp getInlogdate()     Returns the current record's "inlogdate" value
 * @method Users     setUsername()      Sets the current record's "username" value
 * @method Users     setKundnr()        Sets the current record's "kundnr" value
 * @method Users     setPassword()      Sets the current record's "password" value
 * @method Users     setAbonid()        Sets the current record's "abonid" value
 * @method Users     setUserstatid()    Sets the current record's "userstatid" value
 * @method Users     setPriv()          Sets the current record's "priv" value
 * @method Users     setYearOfBirth()   Sets the current record's "year_of_birth" value
 * @method Users     setGender()        Sets the current record's "gender" value
 * @method Users     setFirstname()     Sets the current record's "firstname" value
 * @method Users     setLastname()      Sets the current record's "lastname" value
 * @method Users     setCo()            Sets the current record's "co" value
 * @method Users     setStreet()        Sets the current record's "street" value
 * @method Users     setZipcode()       Sets the current record's "zipcode" value
 * @method Users     setCity()          Sets the current record's "city" value
 * @method Users     setLand()          Sets the current record's "land" value
 * @method Users     setEmail()         Sets the current record's "email" value
 * @method Users     setPhone()         Sets the current record's "phone" value
 * @method Users     setRegdate()       Sets the current record's "regdate" value
 * @method Users     setStopdate()      Sets the current record's "stopdate" value
 * @method Users     setBetdate()       Sets the current record's "betdate" value
 * @method Users     setInlog()         Sets the current record's "inlog" value
 * @method Users     setInlogdate()     Sets the current record's "inlogdate" value
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsers extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('users');
        $this->hasColumn('username', 'string', 45, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 45,
             ));
        $this->hasColumn('kundnr', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('password', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('abonid', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('userstatid', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('priv', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('year_of_birth', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('gender', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('firstname', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('lastname', 'string', 64, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 64,
             ));
        $this->hasColumn('co', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('street', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('zipcode', 'string', 6, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 6,
             ));
        $this->hasColumn('city', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('land', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('email', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('phone', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('regdate', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('stopdate', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('betdate', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('inlog', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('inlogdate', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}