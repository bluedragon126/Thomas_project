<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('BtchartCompanyDetails', 'doctrine');

/**
 * BaseBtchartCompanyDetails
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $company_type_id
 * @property string $company_name
 * @property string $company_symbol
 * @property string $country
 * @property string $list
 * @property string $sector
 * @property integer $active
 * @property integer $default_chart
 * @property integer $object_id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Objekt $Objekt
 * @property BtchartCompanyCategory $BtchartCompanyCategory
 * 
 * @method integer                getId()                     Returns the current record's "id" value
 * @method integer                getCompanyTypeId()          Returns the current record's "company_type_id" value
 * @method string                 getCompanyName()            Returns the current record's "company_name" value
 * @method string                 getCompanySymbol()          Returns the current record's "company_symbol" value
 * @method string                 getCountry()                Returns the current record's "country" value
 * @method string                 getList()                   Returns the current record's "list" value
 * @method string                 getSector()                 Returns the current record's "sector" value
 * @method integer                getActive()                 Returns the current record's "active" value
 * @method integer                getDefaultChart()           Returns the current record's "default_chart" value
 * @method integer                getObjectId()               Returns the current record's "object_id" value
 * @method timestamp              getCreatedAt()              Returns the current record's "created_at" value
 * @method timestamp              getUpdatedAt()              Returns the current record's "updated_at" value
 * @method Objekt                 getObjekt()                 Returns the current record's "Objekt" value
 * @method BtchartCompanyCategory getBtchartCompanyCategory() Returns the current record's "BtchartCompanyCategory" value
 * @method BtchartCompanyDetails  setId()                     Sets the current record's "id" value
 * @method BtchartCompanyDetails  setCompanyTypeId()          Sets the current record's "company_type_id" value
 * @method BtchartCompanyDetails  setCompanyName()            Sets the current record's "company_name" value
 * @method BtchartCompanyDetails  setCompanySymbol()          Sets the current record's "company_symbol" value
 * @method BtchartCompanyDetails  setCountry()                Sets the current record's "country" value
 * @method BtchartCompanyDetails  setList()                   Sets the current record's "list" value
 * @method BtchartCompanyDetails  setSector()                 Sets the current record's "sector" value
 * @method BtchartCompanyDetails  setActive()                 Sets the current record's "active" value
 * @method BtchartCompanyDetails  setDefaultChart()           Sets the current record's "default_chart" value
 * @method BtchartCompanyDetails  setObjectId()               Sets the current record's "object_id" value
 * @method BtchartCompanyDetails  setCreatedAt()              Sets the current record's "created_at" value
 * @method BtchartCompanyDetails  setUpdatedAt()              Sets the current record's "updated_at" value
 * @method BtchartCompanyDetails  setObjekt()                 Sets the current record's "Objekt" value
 * @method BtchartCompanyDetails  setBtchartCompanyCategory() Sets the current record's "BtchartCompanyCategory" value
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBtchartCompanyDetails extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('btchart_company_details');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('company_type_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('company_name', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('company_symbol', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('country', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('list', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('sector', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('active', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('default_chart', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             'notnull' => true,
             'length' => 2,
             ));
        $this->hasColumn('object_id', 'integer', 3, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 3,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Objekt', array(
             'local' => 'object_id',
             'foreign' => 'object_id'));

        $this->hasOne('BtchartCompanyCategory', array(
             'local' => 'company_type_id',
             'foreign' => 'id'));
    }
}