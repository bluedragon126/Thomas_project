<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PurchasedItem', 'doctrine');

/**
 * BasePurchasedItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $purchase_id
 * @property integer $product_id
 * @property integer $articleornot
 * @property integer $quantity
 * @property integer $price_per_unit
 * @property string $product_text
 * @property float $total_price
 * @property float $shipping
 * @property float $vat
 * @property timestamp $created_at
 * 
 * @method integer       getId()             Returns the current record's "id" value
 * @method integer       getPurchaseId()     Returns the current record's "purchase_id" value
 * @method integer       getProductId()      Returns the current record's "product_id" value
 * @method integer       getArticleornot()   Returns the current record's "articleornot" value
 * @method integer       getQuantity()       Returns the current record's "quantity" value
 * @method integer       getPricePerUnit()   Returns the current record's "price_per_unit" value
 * @method string        getProductText()    Returns the current record's "product_text" value
 * @method float         getTotalPrice()     Returns the current record's "total_price" value
 * @method float         getShipping()       Returns the current record's "shipping" value
 * @method float         getVat()            Returns the current record's "vat" value
 * @method timestamp     getCreatedAt()      Returns the current record's "created_at" value
 * @method PurchasedItem setId()             Sets the current record's "id" value
 * @method PurchasedItem setPurchaseId()     Sets the current record's "purchase_id" value
 * @method PurchasedItem setProductId()      Sets the current record's "product_id" value
 * @method PurchasedItem setArticleornot()   Sets the current record's "articleornot" value
 * @method PurchasedItem setQuantity()       Sets the current record's "quantity" value
 * @method PurchasedItem setPricePerUnit()   Sets the current record's "price_per_unit" value
 * @method PurchasedItem setProductText()    Sets the current record's "product_text" value
 * @method PurchasedItem setTotalPrice()     Sets the current record's "total_price" value
 * @method PurchasedItem setShipping()       Sets the current record's "shipping" value
 * @method PurchasedItem setVat()            Sets the current record's "vat" value
 * @method PurchasedItem setCreatedAt()      Sets the current record's "created_at" value
 * 
 * @package    sisterbt
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePurchasedItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('purchased_item');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('purchase_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('product_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('articleornot', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('quantity', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('price_per_unit', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('product_text', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('total_price', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('shipping', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('vat', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}